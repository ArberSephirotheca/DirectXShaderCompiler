=== COMMAND ===
/home/t-zheychen/dxc_workspace/DirectXShaderCompiler/build-fuzzer/bin/minihlsl-standalone -o 1 /home/t-zheychen/dxc_workspace/DirectXShaderCompiler/tools/clang/tools/dxc-fuzzer/examples/control_flow_for_if.hlsl

=== RETURN CODE ===
0

=== STDOUT ===
MiniHLSL Interpreter
====================
Input file: /home/t-zheychen/dxc_workspace/DirectXShaderCompiler/tools/clang/tools/dxc-fuzzer/examples/control_flow_for_if.hlsl
Wave size: 32
Order verification: 1 orderings

Converting HLSL function: main
Found numthreads attribute: [4, 1, 1]
Converting compound statement with 4 child statements
Converting statement: DeclStmt
Converting declaration statement
Declaring variable: laneId
Converting expression: CallExpr
Converting function call to expression: WaveGetLaneIndex
Converting statement: DeclStmt
Converting declaration statement
Declaring variable: result
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
Converting statement: ForStmt
Converting for statement
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
Converting expression: BinaryOperator
Converting expression: ImplicitCastExpr
Converting expression: DeclRefExpr
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
Converting expression: UnaryOperator
Converting expression: DeclRefExpr
Converting statement: IfStmt
Converting if statement
Converting expression: BinaryOperator
Converting expression: ImplicitCastExpr
Converting expression: DeclRefExpr
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
Converting statement: IfStmt
Converting if statement
Converting expression: BinaryOperator
Converting expression: ImplicitCastExpr
Converting expression: DeclRefExpr
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
Converting statement: CompoundAssignOperator
Converting compound assignment operator: +=
Converting expression: DeclRefExpr
Converting expression: ImplicitCastExpr
Converting expression: CallExpr
Converting function call to expression: WaveActiveSum
Converting expression: IntegerLiteral
DEBUG: Creating AssignStmt for compound assignment: result = (result + WaveActiveSum(10))
DEBUG: Created statement type: AssignStmt with toString: result = (result + WaveActiveSum(10));
Converting statement: CompoundAssignOperator
Converting compound assignment operator: +=
Converting expression: DeclRefExpr
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
DEBUG: Creating AssignStmt for compound assignment: result = (result + 1)
DEBUG: Created statement type: AssignStmt with toString: result = (result + 1);
Converting statement: BinaryOperator
Converting expression: DeclRefExpr
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
Converting statement: DeclStmt
Converting declaration statement
Declaring variable: totalSum
Converting expression: CallExpr
Converting function call to expression: WaveActiveSum
Converting expression: ImplicitCastExpr
Converting expression: DeclRefExpr
Converted AST to interpreter program with 4 statements
Thread configuration: [4, 1, 1]

DEBUG: findOrCreateBlockForPath called with 0 waves of unknown lanes
DEBUG: Initializing wave 0 with 4 lanes in initial block 1
DEBUG: markLaneArrived - Lane 0 transitioned from Unknown to Participating in block 1
DEBUG: Lane 0 assigned to block 1
DEBUG: markLaneArrived - Lane 1 transitioned from Unknown to Participating in block 1
DEBUG: Lane 1 assigned to block 1
DEBUG: markLaneArrived - Lane 2 transitioned from Unknown to Participating in block 1
DEBUG: Lane 2 assigned to block 1
DEBUG: markLaneArrived - Lane 3 transitioned from Unknown to Participating in block 1
DEBUG: Lane 3 assigned to block 1
DEBUG: ForStmt - Lane 0 starting Result-based for loop execution
DEBUG: ForStmt - Lane 0 starting fresh execution (pushed to stack depth=1, this=0x508000002820)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 2
DEBUG: addUnknownLane - adding lane 1 to new block 2
DEBUG: addUnknownLane - adding lane 2 to new block 2
DEBUG: addUnknownLane - adding lane 3 to new block 2
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 3
DEBUG: addUnknownLane - adding lane 1 to new block 3
DEBUG: addUnknownLane - adding lane 2 to new block 3
DEBUG: addUnknownLane - adding lane 3 to new block 3
DEBUG: ForStmt - Lane 0 in phase EvaluatingInit (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 evaluating init (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 0 to block 2
DEBUG: assignLaneToBlock - START: lane 0 being assigned to block 2
DEBUG: assignLaneToBlock - BEFORE: block 2 has 0 participating lanes, 0 waiting lanes, 4 unknown lanes (0 1 2 3)
DEBUG: assignLaneToBlock - moving lane 0 from block 1 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from block 1
DEBUG: assignLaneToBlock - AFTER: block 2 has 1 participating lanes (0), 0 waiting lanes, 3 unknown lanes (1 2 3)
DEBUG: assignLaneToBlock - END: lane 0 successfully assigned to block 2
DEBUG: moveThreadFromUnknownToParticipating - lane 0 is now in block 2
DEBUG: ForStmt - Lane 1 starting Result-based for loop execution
DEBUG: ForStmt - Lane 1 starting fresh execution (pushed to stack depth=1, this=0x508000002820)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 2 3 } (3 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 2 3 } (3 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: ForStmt - Lane 1 in phase EvaluatingInit (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 evaluating init (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 1 to block 2
DEBUG: assignLaneToBlock - START: lane 1 being assigned to block 2
DEBUG: assignLaneToBlock - BEFORE: block 2 has 1 participating lanes (0), 0 waiting lanes, 3 unknown lanes (1 2 3)
DEBUG: assignLaneToBlock - moving lane 1 from block 1 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from block 1
DEBUG: assignLaneToBlock - AFTER: block 2 has 2 participating lanes (0 1), 0 waiting lanes, 2 unknown lanes (2 3)
DEBUG: assignLaneToBlock - END: lane 1 successfully assigned to block 2
DEBUG: moveThreadFromUnknownToParticipating - lane 1 is now in block 2
DEBUG: ForStmt - Lane 2 starting Result-based for loop execution
DEBUG: ForStmt - Lane 2 starting fresh execution (pushed to stack depth=1, this=0x508000002820)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {2 3 } (2 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {2 3 } (2 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: ForStmt - Lane 2 in phase EvaluatingInit (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 evaluating init (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 2 to block 2
DEBUG: assignLaneToBlock - START: lane 2 being assigned to block 2
DEBUG: assignLaneToBlock - BEFORE: block 2 has 2 participating lanes (0 1), 0 waiting lanes, 2 unknown lanes (2 3)
DEBUG: assignLaneToBlock - moving lane 2 from block 1 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from block 1
DEBUG: assignLaneToBlock - AFTER: block 2 has 3 participating lanes (0 1 2), 0 waiting lanes, 1 unknown lanes (3)
DEBUG: assignLaneToBlock - END: lane 2 successfully assigned to block 2
DEBUG: moveThreadFromUnknownToParticipating - lane 2 is now in block 2
DEBUG: ForStmt - Lane 3 starting Result-based for loop execution
DEBUG: ForStmt - Lane 3 starting fresh execution (pushed to stack depth=1, this=0x508000002820)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {3 } (1 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {3 } (1 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: ForStmt - Lane 3 in phase EvaluatingInit (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 evaluating init (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 3 to block 2
DEBUG: assignLaneToBlock - START: lane 3 being assigned to block 2
DEBUG: assignLaneToBlock - BEFORE: block 2 has 3 participating lanes (0 1 2), 0 waiting lanes, 1 unknown lanes (3)
DEBUG: assignLaneToBlock - moving lane 3 from block 1 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from block 1
DEBUG: assignLaneToBlock - AFTER: block 2 has 4 participating lanes (0 1 2 3), 0 waiting lanes, 0 unknown lanes
DEBUG: assignLaneToBlock - END: lane 3 successfully assigned to block 2
DEBUG: moveThreadFromUnknownToParticipating - lane 3 is now in block 2
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase EvaluatingCondition (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 evaluating condition for iteration 0 (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'i' (Result-based)
DEBUG: VariableExpr - Variable 'i' = 0 (lane 0 at 0x50f000000040)
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase EvaluatingCondition (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 evaluating condition for iteration 0 (Result-based)
DEBUG: BinaryOpExpr - Lane 1 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 1 evaluating variable 'i' (Result-based)
DEBUG: VariableExpr - Variable 'i' = 0 (lane 1 at 0x50f000000130)
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase EvaluatingCondition (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 evaluating condition for iteration 0 (Result-based)
DEBUG: BinaryOpExpr - Lane 2 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 2 evaluating variable 'i' (Result-based)
DEBUG: VariableExpr - Variable 'i' = 0 (lane 2 at 0x50f000000220)
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase EvaluatingCondition (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 evaluating condition for iteration 0 (Result-based)
DEBUG: BinaryOpExpr - Lane 3 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 3 evaluating variable 'i' (Result-based)
DEBUG: VariableExpr - Variable 'i' = 0 (lane 3 at 0x50f000000310)
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 1
  Stack[0]: sourceStatement=0x508000002820
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 pushed iteration merge point 0x508000007820 (no iteration block needed, but merge stack modified)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 2 (Result-based)
DEBUG: IfStmt - Lane 0 starting Result-based if statement
DEBUG: IfStmt - Lane 0 starting fresh execution (pushed to stack depth=2, this=0x506000001640)
DEBUG: IfStmt - Lane 0 in phase EvaluatingCondition (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 0 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 0 (lane 0 at 0x50f000000040)
DEBUG: IfStmt - Lane 0 condition result=1 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x506000001640, parentBlockId=2, hasElse=1
DEBUG: createIfBlocks - mergeStack size=3
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 4
DEBUG: addUnknownLane - adding lane 1 to new block 4
DEBUG: addUnknownLane - adding lane 2 to new block 4
DEBUG: addUnknownLane - adding lane 3 to new block 4
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 5
DEBUG: addUnknownLane - adding lane 1 to new block 5
DEBUG: addUnknownLane - adding lane 2 to new block 5
DEBUG: addUnknownLane - adding lane 3 to new block 5
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 6
DEBUG: addUnknownLane - adding lane 1 to new block 6
DEBUG: addUnknownLane - adding lane 2 to new block 6
DEBUG: addUnknownLane - adding lane 3 to new block 6
DEBUG: createIfBlocks - Created blocks: thenBlockId=4, elseBlockId=5, mergeBlockId=6
DEBUG: IfStmt - Lane 0 setup complete: thenBlockId=4, elseBlockId=5, mergeBlockId=6 (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 0 to block 4
DEBUG: assignLaneToBlock - START: lane 0 being assigned to block 4
DEBUG: assignLaneToBlock - BEFORE: block 4 has 0 participating lanes, 0 waiting lanes, 4 unknown lanes (0 1 2 3)
DEBUG: assignLaneToBlock - moving lane 0 from block 2 (type 4) to block 4 (type 1), isHeaderToLoopBody=1
DEBUG: Keeping lane 0 as Participating in header block 2 while also adding to loop body block 4
DEBUG: assignLaneToBlock - AFTER: block 4 has 1 participating lanes (0), 0 waiting lanes, 3 unknown lanes (1 2 3)
DEBUG: assignLaneToBlock - END: lane 0 successfully assigned to block 4
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: moveThreadFromUnknownToParticipating - lane 0 is now in block 4
DEBUG: removeThreadFromUnknown - removing lane 0 from block 5
DEBUG: Block 5 unknown lanes before removal: {0 1 2 3}
DEBUG: Block 5 unknown lanes after removal: {1 2 3}
DEBUG: Block 5 areAllUnknownLanesResolvedForWave(0) = 0 (tracked by registry)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 2, Block after: 4
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 1
  Stack[0]: sourceStatement=0x508000002820
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 pushed iteration merge point 0x508000007820 (no iteration block needed, but merge stack modified)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 2 (Result-based)
DEBUG: IfStmt - Lane 1 starting Result-based if statement
DEBUG: IfStmt - Lane 1 starting fresh execution (pushed to stack depth=2, this=0x506000001640)
DEBUG: IfStmt - Lane 1 in phase EvaluatingCondition (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 1 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 1 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 1 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 1 (lane 1 at 0x50f000000130)
DEBUG: IfStmt - Lane 1 condition result=1 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x506000001640, parentBlockId=2, hasElse=1
DEBUG: createIfBlocks - mergeStack size=3
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 4 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 5 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 6 - not modifying unknown lanes
DEBUG: createIfBlocks - Created blocks: thenBlockId=4, elseBlockId=5, mergeBlockId=6
DEBUG: IfStmt - Lane 1 setup complete: thenBlockId=4, elseBlockId=5, mergeBlockId=6 (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 1 to block 4
DEBUG: assignLaneToBlock - START: lane 1 being assigned to block 4
DEBUG: assignLaneToBlock - BEFORE: block 4 has 1 participating lanes (0), 0 waiting lanes, 3 unknown lanes (1 2 3)
DEBUG: assignLaneToBlock - moving lane 1 from block 2 (type 4) to block 4 (type 1), isHeaderToLoopBody=1
DEBUG: Keeping lane 1 as Participating in header block 2 while also adding to loop body block 4
DEBUG: assignLaneToBlock - AFTER: block 4 has 2 participating lanes (0 1), 0 waiting lanes, 2 unknown lanes (2 3)
DEBUG: assignLaneToBlock - END: lane 1 successfully assigned to block 4
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: moveThreadFromUnknownToParticipating - lane 1 is now in block 4
DEBUG: removeThreadFromUnknown - removing lane 1 from block 5
DEBUG: Block 5 unknown lanes before removal: {1 2 3}
DEBUG: Block 5 unknown lanes after removal: {2 3}
DEBUG: Block 5 areAllUnknownLanesResolvedForWave(0) = 0 (tracked by registry)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 2, Block after: 4
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 1
  Stack[0]: sourceStatement=0x508000002820
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 pushed iteration merge point 0x508000007820 (no iteration block needed, but merge stack modified)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 2 (Result-based)
DEBUG: IfStmt - Lane 2 starting Result-based if statement
DEBUG: IfStmt - Lane 2 starting fresh execution (pushed to stack depth=2, this=0x506000001640)
DEBUG: IfStmt - Lane 2 in phase EvaluatingCondition (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 2 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 2 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 2 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 2 (lane 2 at 0x50f000000220)
DEBUG: IfStmt - Lane 2 condition result=0 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x506000001640, parentBlockId=2, hasElse=1
DEBUG: createIfBlocks - mergeStack size=3
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 4 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 5 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 6 - not modifying unknown lanes
DEBUG: createIfBlocks - Created blocks: thenBlockId=4, elseBlockId=5, mergeBlockId=6
DEBUG: IfStmt - Lane 2 setup complete: thenBlockId=4, elseBlockId=5, mergeBlockId=6 (Result-based)
DEBUG: removeThreadFromUnknown - removing lane 2 from block 4
DEBUG: Block 4 unknown lanes before removal: {2 3}
DEBUG: Block 4 unknown lanes after removal: {3}
DEBUG: Block 4 areAllUnknownLanesResolvedForWave(0) = 0 (tracked by registry)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 2 to block 5
DEBUG: assignLaneToBlock - START: lane 2 being assigned to block 5
DEBUG: assignLaneToBlock - BEFORE: block 5 has 0 participating lanes, 0 waiting lanes, 2 unknown lanes (2 3)
DEBUG: assignLaneToBlock - moving lane 2 from block 2 (type 4) to block 5 (type 2), isHeaderToLoopBody=1
DEBUG: Keeping lane 2 as Participating in header block 2 while also adding to loop body block 5
DEBUG: assignLaneToBlock - AFTER: block 5 has 1 participating lanes (2), 0 waiting lanes, 1 unknown lanes (3)
DEBUG: assignLaneToBlock - END: lane 2 successfully assigned to block 5
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: moveThreadFromUnknownToParticipating - lane 2 is now in block 5
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 2, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 1
  Stack[0]: sourceStatement=0x508000002820
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 pushed iteration merge point 0x508000007820 (no iteration block needed, but merge stack modified)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 2 (Result-based)
DEBUG: IfStmt - Lane 3 starting Result-based if statement
DEBUG: IfStmt - Lane 3 starting fresh execution (pushed to stack depth=2, this=0x506000001640)
DEBUG: IfStmt - Lane 3 in phase EvaluatingCondition (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 3 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 3 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 3 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 3 (lane 3 at 0x50f000000310)
DEBUG: IfStmt - Lane 3 condition result=0 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x506000001640, parentBlockId=2, hasElse=1
DEBUG: createIfBlocks - mergeStack size=3
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 4 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 5 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 6 - not modifying unknown lanes
DEBUG: createIfBlocks - Created blocks: thenBlockId=4, elseBlockId=5, mergeBlockId=6
DEBUG: IfStmt - Lane 3 setup complete: thenBlockId=4, elseBlockId=5, mergeBlockId=6 (Result-based)
DEBUG: removeThreadFromUnknown - removing lane 3 from block 4
DEBUG: Block 4 unknown lanes before removal: {3}
DEBUG: Block 4 unknown lanes after removal: {}
DEBUG: Block 4 areAllUnknownLanesResolvedForWave(0) = 1 (tracked by registry)
DEBUG: Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: moveThreadFromUnknownToParticipating - moving lane 3 to block 5
DEBUG: assignLaneToBlock - START: lane 3 being assigned to block 5
DEBUG: assignLaneToBlock - BEFORE: block 5 has 1 participating lanes (2), 0 waiting lanes, 1 unknown lanes (3)
DEBUG: assignLaneToBlock - moving lane 3 from block 2 (type 4) to block 5 (type 2), isHeaderToLoopBody=1
DEBUG: Keeping lane 3 as Participating in header block 2 while also adding to loop body block 5
DEBUG: assignLaneToBlock - AFTER: block 5 has 2 participating lanes (2 3), 0 waiting lanes, 0 unknown lanes
DEBUG: assignLaneToBlock - END: lane 3 successfully assigned to block 5
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: moveThreadFromUnknownToParticipating - lane 3 is now in block 5
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 2, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 4 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: IfStmt - Lane 0 starting Result-based if statement
DEBUG: IfStmt - Lane 0 starting fresh execution (pushed to stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: IfStmt - Lane 0 in phase EvaluatingCondition (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 0 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 0 (lane 0 at 0x50f000000040)
DEBUG: IfStmt - Lane 0 condition result=1 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x5060000015e0, parentBlockId=4, hasElse=1
DEBUG: createIfBlocks - mergeStack size=4
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
  MergeStack[3]: sourceStatement=0x5060000015e0
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 } (2 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 7
DEBUG: addUnknownLane - adding lane 1 to new block 7
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 } (2 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 8
DEBUG: addUnknownLane - adding lane 1 to new block 8
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 } (2 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 9
DEBUG: addUnknownLane - adding lane 1 to new block 9
DEBUG: createIfBlocks - Created blocks: thenBlockId=7, elseBlockId=8, mergeBlockId=9
DEBUG: IfStmt - Lane 0 setup complete: thenBlockId=7, elseBlockId=8, mergeBlockId=9 (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 0 to block 7
DEBUG: assignLaneToBlock - START: lane 0 being assigned to block 7
DEBUG: assignLaneToBlock - BEFORE: block 7 has 0 participating lanes, 0 waiting lanes, 2 unknown lanes (0 1)
DEBUG: assignLaneToBlock - moving lane 0 from block 4 (type 1) to block 7 (type 1), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from block 4
DEBUG: assignLaneToBlock - AFTER: block 7 has 1 participating lanes (0), 0 waiting lanes, 1 unknown lanes (1)
DEBUG: assignLaneToBlock - END: lane 0 successfully assigned to block 7
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: moveThreadFromUnknownToParticipating - lane 0 is now in block 7
DEBUG: removeThreadFromUnknown - removing lane 0 from block 8
DEBUG: Block 8 unknown lanes before removal: {0 1}
DEBUG: Block 8 unknown lanes after removal: {1}
DEBUG: Block 8 areAllUnknownLanesResolvedForWave(0) = 0 (tracked by registry)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=0 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 4, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 4 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=0 
DEBUG: IfStmt - Lane 1 starting Result-based if statement
DEBUG: IfStmt - Lane 1 starting fresh execution (pushed to stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: IfStmt - Lane 1 in phase EvaluatingCondition (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 1 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 1 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 1 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 1 (lane 1 at 0x50f000000130)
DEBUG: IfStmt - Lane 1 condition result=0 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x5060000015e0, parentBlockId=4, hasElse=1
DEBUG: createIfBlocks - mergeStack size=4
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
  MergeStack[3]: sourceStatement=0x5060000015e0
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 } (1 lanes)
DEBUG: Found existing block 7 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 } (1 lanes)
DEBUG: Found existing block 8 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 } (1 lanes)
DEBUG: Found existing block 9 - not modifying unknown lanes
DEBUG: createIfBlocks - Created blocks: thenBlockId=7, elseBlockId=8, mergeBlockId=9
DEBUG: IfStmt - Lane 1 setup complete: thenBlockId=7, elseBlockId=8, mergeBlockId=9 (Result-based)
DEBUG: removeThreadFromUnknown - removing lane 1 from block 7
DEBUG: Block 7 unknown lanes before removal: {1}
DEBUG: Block 7 unknown lanes after removal: {}
DEBUG: Block 7 areAllUnknownLanesResolvedForWave(0) = 1 (tracked by registry)
DEBUG: Block 7 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: moveThreadFromUnknownToParticipating - moving lane 1 to block 8
DEBUG: assignLaneToBlock - START: lane 1 being assigned to block 8
DEBUG: assignLaneToBlock - BEFORE: block 8 has 0 participating lanes, 0 waiting lanes, 1 unknown lanes (1)
DEBUG: assignLaneToBlock - moving lane 1 from block 4 (type 1) to block 8 (type 2), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from block 4
DEBUG: assignLaneToBlock - AFTER: block 8 has 1 participating lanes (1), 0 waiting lanes, 0 unknown lanes
DEBUG: assignLaneToBlock - END: lane 1 successfully assigned to block 8
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: moveThreadFromUnknownToParticipating - lane 1 is now in block 8
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=0 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 4, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 0 (Result-based)
DEBUG: AssignStmt - Lane 2 assigning to variable 'result' (Result-based)
DEBUG: AssignStmt - Lane 2 assigned value 2 to variable 'result'
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 0 (Result-based)
DEBUG: AssignStmt - Lane 3 assigning to variable 'result' (Result-based)
DEBUG: AssignStmt - Lane 3 assigned value 2 to variable 'result'
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: result = (result + WaveActiveSum(10));
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: AssignStmt - Lane 0 assigning to variable 'result' (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'result' (Result-based)
DEBUG: VariableExpr - Variable 'result' = 0 (lane 0 at 0x50f000000040)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 7, instruction key=(0x503000001a20,7)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: markLaneWaitingForWave - Lane 0 wave 0 in block 7
DEBUG: markLaneWaitingForWave - Successfully set lane 0 to WaitingForWave in block 7
DEBUG: WAVE_OP: Lane 0 cannot execute, starting to wait in block 7
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: Block 7 wave 0 unknown lanes: {}
DEBUG: areAllParticipantsKnownForWaveInstruction - All participants known for sync point
DEBUG: canExecuteWaveInstruction for lane 0 in block 7: canExecuteInBlock=1, allParticipantsKnown=1, allParticipantsArrived=1, canExecuteGlobal=1, syncPointPhase=phase_1
DEBUG: WAVE_OP: After lane 0 started waiting, wave operation can now execute!
DEBUG: ForStmt - Handling error in wrapper: 3
DEBUG: WAVE_WAIT: Lane 0 received WaveOperationWait error, state=2
DEBUG: WAVE_OP: Storing collective result for lanes: 0  (phase: 2)
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=0 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 0 (Result-based)
DEBUG: AssignStmt - Lane 1 assigning to variable 'result' (Result-based)
DEBUG: BinaryOpExpr - Lane 1 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 1 evaluating variable 'result' (Result-based)
DEBUG: VariableExpr - Variable 'result' = 0 (lane 1 at 0x50f000000130)
DEBUG: AssignStmt - Lane 1 assigned value 1 to variable 'result'
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: onLaneFinishWaveOp - Lane 0 finishing wave op in block 7
DEBUG: onLaneFinishWaveOp - Current status in block 7: 2
DEBUG: onLaneFinishWaveOp - Updated lane 0 to Participating in block 7
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: result = (result + WaveActiveSum(10));
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: AssignStmt - Lane 0 assigning to variable 'result' (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'result' (Result-based)
DEBUG: VariableExpr - Variable 'result' = 0 (lane 0 at 0x50f000000040)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 7, instruction key=(0x503000001a20,7)
DEBUG: WAVE_OP: Lane 0 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 0 retrieving stored wave result: 10 (phase: Consumed)
DEBUG: AssignStmt - Lane 0 assigned value 10 to variable 'result'
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
=== Sequential Execution ===
❌ Execution failed: Execution timeout: possible infinite loop or deadlock
DEBUG: findOrCreateBlockForPath called with 0 waves of unknown lanes
DEBUG: Initializing wave 0 with 4 lanes in initial block 1
DEBUG: markLaneArrived - Lane 0 transitioned from Unknown to Participating in block 1
DEBUG: Lane 0 assigned to block 1
DEBUG: markLaneArrived - Lane 1 transitioned from Unknown to Participating in block 1
DEBUG: Lane 1 assigned to block 1
DEBUG: markLaneArrived - Lane 2 transitioned from Unknown to Participating in block 1
DEBUG: Lane 2 assigned to block 1
DEBUG: markLaneArrived - Lane 3 transitioned from Unknown to Participating in block 1
DEBUG: Lane 3 assigned to block 1
DEBUG: ForStmt - Lane 0 starting Result-based for loop execution
DEBUG: ForStmt - Lane 0 starting fresh execution (pushed to stack depth=1, this=0x508000002820)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 2
DEBUG: addUnknownLane - adding lane 1 to new block 2
DEBUG: addUnknownLane - adding lane 2 to new block 2
DEBUG: addUnknownLane - adding lane 3 to new block 2
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 3
DEBUG: addUnknownLane - adding lane 1 to new block 3
DEBUG: addUnknownLane - adding lane 2 to new block 3
DEBUG: addUnknownLane - adding lane 3 to new block 3
DEBUG: ForStmt - Lane 0 in phase EvaluatingInit (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 evaluating init (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 0 to block 2
DEBUG: assignLaneToBlock - START: lane 0 being assigned to block 2
DEBUG: assignLaneToBlock - BEFORE: block 2 has 0 participating lanes, 0 waiting lanes, 4 unknown lanes (0 1 2 3)
DEBUG: assignLaneToBlock - moving lane 0 from block 1 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from block 1
DEBUG: assignLaneToBlock - AFTER: block 2 has 1 participating lanes (0), 0 waiting lanes, 3 unknown lanes (1 2 3)
DEBUG: assignLaneToBlock - END: lane 0 successfully assigned to block 2
DEBUG: moveThreadFromUnknownToParticipating - lane 0 is now in block 2
DEBUG: ForStmt - Lane 1 starting Result-based for loop execution
DEBUG: ForStmt - Lane 1 starting fresh execution (pushed to stack depth=1, this=0x508000002820)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 2 3 } (3 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 2 3 } (3 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: ForStmt - Lane 1 in phase EvaluatingInit (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 evaluating init (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 1 to block 2
DEBUG: assignLaneToBlock - START: lane 1 being assigned to block 2
DEBUG: assignLaneToBlock - BEFORE: block 2 has 1 participating lanes (0), 0 waiting lanes, 3 unknown lanes (1 2 3)
DEBUG: assignLaneToBlock - moving lane 1 from block 1 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from block 1
DEBUG: assignLaneToBlock - AFTER: block 2 has 2 participating lanes (0 1), 0 waiting lanes, 2 unknown lanes (2 3)
DEBUG: assignLaneToBlock - END: lane 1 successfully assigned to block 2
DEBUG: moveThreadFromUnknownToParticipating - lane 1 is now in block 2
DEBUG: ForStmt - Lane 2 starting Result-based for loop execution
DEBUG: ForStmt - Lane 2 starting fresh execution (pushed to stack depth=1, this=0x508000002820)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {2 3 } (2 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {2 3 } (2 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: ForStmt - Lane 2 in phase EvaluatingInit (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 evaluating init (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 2 to block 2
DEBUG: assignLaneToBlock - START: lane 2 being assigned to block 2
DEBUG: assignLaneToBlock - BEFORE: block 2 has 2 participating lanes (0 1), 0 waiting lanes, 2 unknown lanes (2 3)
DEBUG: assignLaneToBlock - moving lane 2 from block 1 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from block 1
DEBUG: assignLaneToBlock - AFTER: block 2 has 3 participating lanes (0 1 2), 0 waiting lanes, 1 unknown lanes (3)
DEBUG: assignLaneToBlock - END: lane 2 successfully assigned to block 2
DEBUG: moveThreadFromUnknownToParticipating - lane 2 is now in block 2
DEBUG: ForStmt - Lane 3 starting Result-based for loop execution
DEBUG: ForStmt - Lane 3 starting fresh execution (pushed to stack depth=1, this=0x508000002820)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {3 } (1 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {3 } (1 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: ForStmt - Lane 3 in phase EvaluatingInit (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 evaluating init (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 3 to block 2
DEBUG: assignLaneToBlock - START: lane 3 being assigned to block 2
DEBUG: assignLaneToBlock - BEFORE: block 2 has 3 participating lanes (0 1 2), 0 waiting lanes, 1 unknown lanes (3)
DEBUG: assignLaneToBlock - moving lane 3 from block 1 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from block 1
DEBUG: assignLaneToBlock - AFTER: block 2 has 4 participating lanes (0 1 2 3), 0 waiting lanes, 0 unknown lanes
DEBUG: assignLaneToBlock - END: lane 3 successfully assigned to block 2
DEBUG: moveThreadFromUnknownToParticipating - lane 3 is now in block 2
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase EvaluatingCondition (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 evaluating condition for iteration 0 (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'i' (Result-based)
DEBUG: VariableExpr - Variable 'i' = 0 (lane 0 at 0x50f000000400)
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase EvaluatingCondition (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 evaluating condition for iteration 0 (Result-based)
DEBUG: BinaryOpExpr - Lane 1 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 1 evaluating variable 'i' (Result-based)
DEBUG: VariableExpr - Variable 'i' = 0 (lane 1 at 0x50f0000004f0)
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase EvaluatingCondition (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 evaluating condition for iteration 0 (Result-based)
DEBUG: BinaryOpExpr - Lane 2 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 2 evaluating variable 'i' (Result-based)
DEBUG: VariableExpr - Variable 'i' = 0 (lane 2 at 0x50f0000005e0)
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase EvaluatingCondition (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 evaluating condition for iteration 0 (Result-based)
DEBUG: BinaryOpExpr - Lane 3 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 3 evaluating variable 'i' (Result-based)
DEBUG: VariableExpr - Variable 'i' = 0 (lane 3 at 0x50f0000006d0)
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 1
  Stack[0]: sourceStatement=0x508000002820
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 pushed iteration merge point 0x508000007820 (no iteration block needed, but merge stack modified)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 2 (Result-based)
DEBUG: IfStmt - Lane 0 starting Result-based if statement
DEBUG: IfStmt - Lane 0 starting fresh execution (pushed to stack depth=2, this=0x506000001640)
DEBUG: IfStmt - Lane 0 in phase EvaluatingCondition (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 0 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 0 (lane 0 at 0x50f000000400)
DEBUG: IfStmt - Lane 0 condition result=1 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x506000001640, parentBlockId=2, hasElse=1
DEBUG: createIfBlocks - mergeStack size=3
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 4
DEBUG: addUnknownLane - adding lane 1 to new block 4
DEBUG: addUnknownLane - adding lane 2 to new block 4
DEBUG: addUnknownLane - adding lane 3 to new block 4
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 5
DEBUG: addUnknownLane - adding lane 1 to new block 5
DEBUG: addUnknownLane - adding lane 2 to new block 5
DEBUG: addUnknownLane - adding lane 3 to new block 5
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 6
DEBUG: addUnknownLane - adding lane 1 to new block 6
DEBUG: addUnknownLane - adding lane 2 to new block 6
DEBUG: addUnknownLane - adding lane 3 to new block 6
DEBUG: createIfBlocks - Created blocks: thenBlockId=4, elseBlockId=5, mergeBlockId=6
DEBUG: IfStmt - Lane 0 setup complete: thenBlockId=4, elseBlockId=5, mergeBlockId=6 (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 0 to block 4
DEBUG: assignLaneToBlock - START: lane 0 being assigned to block 4
DEBUG: assignLaneToBlock - BEFORE: block 4 has 0 participating lanes, 0 waiting lanes, 4 unknown lanes (0 1 2 3)
DEBUG: assignLaneToBlock - moving lane 0 from block 2 (type 4) to block 4 (type 1), isHeaderToLoopBody=1
DEBUG: Keeping lane 0 as Participating in header block 2 while also adding to loop body block 4
DEBUG: assignLaneToBlock - AFTER: block 4 has 1 participating lanes (0), 0 waiting lanes, 3 unknown lanes (1 2 3)
DEBUG: assignLaneToBlock - END: lane 0 successfully assigned to block 4
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: moveThreadFromUnknownToParticipating - lane 0 is now in block 4
DEBUG: removeThreadFromUnknown - removing lane 0 from block 5
DEBUG: Block 5 unknown lanes before removal: {0 1 2 3}
DEBUG: Block 5 unknown lanes after removal: {1 2 3}
DEBUG: Block 5 areAllUnknownLanesResolvedForWave(0) = 0 (tracked by registry)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 2, Block after: 4
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 1
  Stack[0]: sourceStatement=0x508000002820
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 pushed iteration merge point 0x508000007820 (no iteration block needed, but merge stack modified)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 2 (Result-based)
DEBUG: IfStmt - Lane 1 starting Result-based if statement
DEBUG: IfStmt - Lane 1 starting fresh execution (pushed to stack depth=2, this=0x506000001640)
DEBUG: IfStmt - Lane 1 in phase EvaluatingCondition (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 1 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 1 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 1 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 1 (lane 1 at 0x50f0000004f0)
DEBUG: IfStmt - Lane 1 condition result=1 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x506000001640, parentBlockId=2, hasElse=1
DEBUG: createIfBlocks - mergeStack size=3
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 4 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 5 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 6 - not modifying unknown lanes
DEBUG: createIfBlocks - Created blocks: thenBlockId=4, elseBlockId=5, mergeBlockId=6
DEBUG: IfStmt - Lane 1 setup complete: thenBlockId=4, elseBlockId=5, mergeBlockId=6 (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 1 to block 4
DEBUG: assignLaneToBlock - START: lane 1 being assigned to block 4
DEBUG: assignLaneToBlock - BEFORE: block 4 has 1 participating lanes (0), 0 waiting lanes, 3 unknown lanes (1 2 3)
DEBUG: assignLaneToBlock - moving lane 1 from block 2 (type 4) to block 4 (type 1), isHeaderToLoopBody=1
DEBUG: Keeping lane 1 as Participating in header block 2 while also adding to loop body block 4
DEBUG: assignLaneToBlock - AFTER: block 4 has 2 participating lanes (0 1), 0 waiting lanes, 2 unknown lanes (2 3)
DEBUG: assignLaneToBlock - END: lane 1 successfully assigned to block 4
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: moveThreadFromUnknownToParticipating - lane 1 is now in block 4
DEBUG: removeThreadFromUnknown - removing lane 1 from block 5
DEBUG: Block 5 unknown lanes before removal: {1 2 3}
DEBUG: Block 5 unknown lanes after removal: {2 3}
DEBUG: Block 5 areAllUnknownLanesResolvedForWave(0) = 0 (tracked by registry)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 2, Block after: 4
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 1
  Stack[0]: sourceStatement=0x508000002820
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 pushed iteration merge point 0x508000007820 (no iteration block needed, but merge stack modified)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 2 (Result-based)
DEBUG: IfStmt - Lane 2 starting Result-based if statement
DEBUG: IfStmt - Lane 2 starting fresh execution (pushed to stack depth=2, this=0x506000001640)
DEBUG: IfStmt - Lane 2 in phase EvaluatingCondition (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 2 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 2 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 2 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 2 (lane 2 at 0x50f0000005e0)
DEBUG: IfStmt - Lane 2 condition result=0 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x506000001640, parentBlockId=2, hasElse=1
DEBUG: createIfBlocks - mergeStack size=3
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 4 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 5 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 6 - not modifying unknown lanes
DEBUG: createIfBlocks - Created blocks: thenBlockId=4, elseBlockId=5, mergeBlockId=6
DEBUG: IfStmt - Lane 2 setup complete: thenBlockId=4, elseBlockId=5, mergeBlockId=6 (Result-based)
DEBUG: removeThreadFromUnknown - removing lane 2 from block 4
DEBUG: Block 4 unknown lanes before removal: {2 3}
DEBUG: Block 4 unknown lanes after removal: {3}
DEBUG: Block 4 areAllUnknownLanesResolvedForWave(0) = 0 (tracked by registry)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 2 to block 5
DEBUG: assignLaneToBlock - START: lane 2 being assigned to block 5
DEBUG: assignLaneToBlock - BEFORE: block 5 has 0 participating lanes, 0 waiting lanes, 2 unknown lanes (2 3)
DEBUG: assignLaneToBlock - moving lane 2 from block 2 (type 4) to block 5 (type 2), isHeaderToLoopBody=1
DEBUG: Keeping lane 2 as Participating in header block 2 while also adding to loop body block 5
DEBUG: assignLaneToBlock - AFTER: block 5 has 1 participating lanes (2), 0 waiting lanes, 1 unknown lanes (3)
DEBUG: assignLaneToBlock - END: lane 2 successfully assigned to block 5
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: moveThreadFromUnknownToParticipating - lane 2 is now in block 5
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 2, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=1, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=1, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 1
  Stack[0]: sourceStatement=0x508000002820
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 pushed iteration merge point 0x508000007820 (no iteration block needed, but merge stack modified)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 2 (Result-based)
DEBUG: IfStmt - Lane 3 starting Result-based if statement
DEBUG: IfStmt - Lane 3 starting fresh execution (pushed to stack depth=2, this=0x506000001640)
DEBUG: IfStmt - Lane 3 in phase EvaluatingCondition (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 3 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 3 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 3 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 3 (lane 3 at 0x50f0000006d0)
DEBUG: IfStmt - Lane 3 condition result=0 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x506000001640, parentBlockId=2, hasElse=1
DEBUG: createIfBlocks - mergeStack size=3
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 4 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 5 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 6 - not modifying unknown lanes
DEBUG: createIfBlocks - Created blocks: thenBlockId=4, elseBlockId=5, mergeBlockId=6
DEBUG: IfStmt - Lane 3 setup complete: thenBlockId=4, elseBlockId=5, mergeBlockId=6 (Result-based)
DEBUG: removeThreadFromUnknown - removing lane 3 from block 4
DEBUG: Block 4 unknown lanes before removal: {3}
DEBUG: Block 4 unknown lanes after removal: {}
DEBUG: Block 4 areAllUnknownLanesResolvedForWave(0) = 1 (tracked by registry)
DEBUG: Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: moveThreadFromUnknownToParticipating - moving lane 3 to block 5
DEBUG: assignLaneToBlock - START: lane 3 being assigned to block 5
DEBUG: assignLaneToBlock - BEFORE: block 5 has 1 participating lanes (2), 0 waiting lanes, 1 unknown lanes (3)
DEBUG: assignLaneToBlock - moving lane 3 from block 2 (type 4) to block 5 (type 2), isHeaderToLoopBody=1
DEBUG: Keeping lane 3 as Participating in header block 2 while also adding to loop body block 5
DEBUG: assignLaneToBlock - AFTER: block 5 has 2 participating lanes (2 3), 0 waiting lanes, 0 unknown lanes
DEBUG: assignLaneToBlock - END: lane 3 successfully assigned to block 5
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: moveThreadFromUnknownToParticipating - lane 3 is now in block 5
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 2, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 4 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: IfStmt - Lane 0 starting Result-based if statement
DEBUG: IfStmt - Lane 0 starting fresh execution (pushed to stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: IfStmt - Lane 0 in phase EvaluatingCondition (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 0 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 0 (lane 0 at 0x50f000000400)
DEBUG: IfStmt - Lane 0 condition result=1 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x5060000015e0, parentBlockId=4, hasElse=1
DEBUG: createIfBlocks - mergeStack size=4
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
  MergeStack[3]: sourceStatement=0x5060000015e0
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 } (2 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 7
DEBUG: addUnknownLane - adding lane 1 to new block 7
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 } (2 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 8
DEBUG: addUnknownLane - adding lane 1 to new block 8
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 } (2 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 9
DEBUG: addUnknownLane - adding lane 1 to new block 9
DEBUG: createIfBlocks - Created blocks: thenBlockId=7, elseBlockId=8, mergeBlockId=9
DEBUG: IfStmt - Lane 0 setup complete: thenBlockId=7, elseBlockId=8, mergeBlockId=9 (Result-based)
DEBUG: moveThreadFromUnknownToParticipating - moving lane 0 to block 7
DEBUG: assignLaneToBlock - START: lane 0 being assigned to block 7
DEBUG: assignLaneToBlock - BEFORE: block 7 has 0 participating lanes, 0 waiting lanes, 2 unknown lanes (0 1)
DEBUG: assignLaneToBlock - moving lane 0 from block 4 (type 1) to block 7 (type 1), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from block 4
DEBUG: assignLaneToBlock - AFTER: block 7 has 1 participating lanes (0), 0 waiting lanes, 1 unknown lanes (1)
DEBUG: assignLaneToBlock - END: lane 0 successfully assigned to block 7
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: moveThreadFromUnknownToParticipating - lane 0 is now in block 7
DEBUG: removeThreadFromUnknown - removing lane 0 from block 8
DEBUG: Block 8 unknown lanes before removal: {0 1}
DEBUG: Block 8 unknown lanes after removal: {1}
DEBUG: Block 8 areAllUnknownLanesResolvedForWave(0) = 0 (tracked by registry)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=0 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 4, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 4 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=0 
DEBUG: IfStmt - Lane 1 starting Result-based if statement
DEBUG: IfStmt - Lane 1 starting fresh execution (pushed to stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 4 (registry returned: 4)
DEBUG: IfStmt - Lane 1 in phase EvaluatingCondition (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 evaluating condition (Result-based)
DEBUG: IfStmt - Lane 1 evaluating condition for first time (Result-based)
DEBUG: BinaryOpExpr - Lane 1 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 1 evaluating variable 'laneId' (Result-based)
DEBUG: VariableExpr - Variable 'laneId' = 1 (lane 1 at 0x50f0000004f0)
DEBUG: IfStmt - Lane 1 condition result=0 (Result-based)
DEBUG: createIfBlocks - ifStmt=0x5060000015e0, parentBlockId=4, hasElse=1
DEBUG: createIfBlocks - mergeStack size=4
  MergeStack[0]: sourceStatement=0x508000002820
  MergeStack[1]: sourceStatement=0x508000007820
  MergeStack[2]: sourceStatement=0x506000001640
  MergeStack[3]: sourceStatement=0x5060000015e0
DEBUG: createIfBlocks - executionPath size=0
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 } (1 lanes)
DEBUG: Found existing block 7 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 } (1 lanes)
DEBUG: Found existing block 8 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {1 } (1 lanes)
DEBUG: Found existing block 9 - not modifying unknown lanes
DEBUG: createIfBlocks - Created blocks: thenBlockId=7, elseBlockId=8, mergeBlockId=9
DEBUG: IfStmt - Lane 1 setup complete: thenBlockId=7, elseBlockId=8, mergeBlockId=9 (Result-based)
DEBUG: removeThreadFromUnknown - removing lane 1 from block 7
DEBUG: Block 7 unknown lanes before removal: {1}
DEBUG: Block 7 unknown lanes after removal: {}
DEBUG: Block 7 areAllUnknownLanesResolvedForWave(0) = 1 (tracked by registry)
DEBUG: Block 7 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: moveThreadFromUnknownToParticipating - moving lane 1 to block 8
DEBUG: assignLaneToBlock - START: lane 1 being assigned to block 8
DEBUG: assignLaneToBlock - BEFORE: block 8 has 0 participating lanes, 0 waiting lanes, 1 unknown lanes (1)
DEBUG: assignLaneToBlock - moving lane 1 from block 4 (type 1) to block 8 (type 2), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from block 4
DEBUG: assignLaneToBlock - AFTER: block 8 has 1 participating lanes (1), 0 waiting lanes, 0 unknown lanes
DEBUG: assignLaneToBlock - END: lane 1 successfully assigned to block 8
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: moveThreadFromUnknownToParticipating - lane 1 is now in block 8
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=0 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 4, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 0 (Result-based)
DEBUG: AssignStmt - Lane 2 assigning to variable 'result' (Result-based)
DEBUG: AssignStmt - Lane 2 assigned value 2 to variable 'result'
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 0 (Result-based)
DEBUG: AssignStmt - Lane 3 assigning to variable 'result' (Result-based)
DEBUG: AssignStmt - Lane 3 assigned value 2 to variable 'result'
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: result = (result + WaveActiveSum(10));
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: AssignStmt - Lane 0 assigning to variable 'result' (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'result' (Result-based)
DEBUG: VariableExpr - Variable 'result' = 0 (lane 0 at 0x50f000000400)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 7, instruction key=(0x503000001a20,7)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: markLaneWaitingForWave - Lane 0 wave 0 in block 7
DEBUG: markLaneWaitingForWave - Successfully set lane 0 to WaitingForWave in block 7
DEBUG: WAVE_OP: Lane 0 cannot execute, starting to wait in block 7
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: Block 7 wave 0 unknown lanes: {}
DEBUG: areAllParticipantsKnownForWaveInstruction - All participants known for sync point
DEBUG: canExecuteWaveInstruction for lane 0 in block 7: canExecuteInBlock=1, allParticipantsKnown=1, allParticipantsArrived=1, canExecuteGlobal=1, syncPointPhase=phase_1
DEBUG: WAVE_OP: After lane 0 started waiting, wave operation can now execute!
DEBUG: ForStmt - Handling error in wrapper: 3
DEBUG: WAVE_WAIT: Lane 0 received WaveOperationWait error, state=2
DEBUG: WAVE_OP: Storing collective result for lanes: 0  (phase: 2)
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=0 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 0 (Result-based)
DEBUG: AssignStmt - Lane 1 assigning to variable 'result' (Result-based)
DEBUG: BinaryOpExpr - Lane 1 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 1 evaluating variable 'result' (Result-based)
DEBUG: VariableExpr - Variable 'result' = 0 (lane 1 at 0x50f0000004f0)
DEBUG: AssignStmt - Lane 1 assigned value 1 to variable 'result'
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: onLaneFinishWaveOp - Lane 0 finishing wave op in block 7
DEBUG: onLaneFinishWaveOp - Current status in block 7: 2
DEBUG: onLaneFinishWaveOp - Updated lane 0 to Participating in block 7
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: result = (result + WaveActiveSum(10));
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=0 
DEBUG: AssignStmt - Lane 0 assigning to variable 'result' (Result-based)
DEBUG: BinaryOpExpr - Lane 0 evaluating binary operation (Result-based)
DEBUG: VariableExpr - Lane 0 evaluating variable 'result' (Result-based)
DEBUG: VariableExpr - Variable 'result' = 0 (lane 0 at 0x50f000000400)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 7, instruction key=(0x503000001a20,7)
DEBUG: WAVE_OP: Lane 0 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 0 retrieving stored wave result: 10 (phase: Consumed)
DEBUG: AssignStmt - Lane 0 assigned value 10 to variable 'result'
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 0 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 0 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 0 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 0 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 0 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 0 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 executing statement 0 in block 7 (Result-based)
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 0 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 0 variables BEFORE statement: i=0 laneId=0 result=10 
DEBUG: IfStmt - Lane 0 resuming Result-based if statement
DEBUG: IfStmt - Lane 0 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: IfStmt - Lane 0 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 0 executing then block from statement 1 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 0 variables AFTER statement: i=0 laneId=0 result=10 
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
DEBUG: ForStmt - Lane 0 child statement needs resume (Result-based)
  Block before: 7, Block after: 7
DEBUG: ForStmt - Lane 1 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 1 resuming execution (found at stack index=0, current stack depth=3, this=0x508000002820)
DEBUG: ForStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 1 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 1 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 1 merge stack size: 4
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Stack[3]: sourceStatement=0x5060000015e0
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 1 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 executing statement 0 in block 8 (Result-based)
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=1, current stack depth=3, this=0x506000001640)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 1 executing then block from statement 0 of 1 total statements (Result-based)
DEBUG: IfStmt - Lane 1 executing then block statement 0: if ((laneId == 0)) {
    result = (result + WaveActiveSum(10));
} else {
    result = (result + 1);
}
DEBUG: IfStmt - Lane 1 variables BEFORE statement: i=0 laneId=1 result=1 
DEBUG: IfStmt - Lane 1 resuming Result-based if statement
DEBUG: IfStmt - Lane 1 resuming execution (found at stack index=2, current stack depth=3, this=0x5060000015e0)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: IfStmt - Lane 1 in phase ExecutingBody (Result-based, stack depth=3, our index=2, this=0x5060000015e0)
DEBUG: IfStmt - Lane 1 executing else block from statement 1 (Result-based)
DEBUG: IfStmt - Lane 1 variables AFTER statement: i=0 laneId=1 result=1 
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
DEBUG: ForStmt - Lane 1 child statement needs resume (Result-based)
  Block before: 8, Block after: 8
DEBUG: ForStmt - Lane 2 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 2 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 2 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 2 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 2 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 2 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 2 resuming Result-based if statement
DEBUG: IfStmt - Lane 2 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 2 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 2 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 2 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
DEBUG: ForStmt - Lane 3 resuming Result-based for loop execution
DEBUG: ForStmt - Lane 3 resuming execution (found at stack index=0, current stack depth=2, this=0x508000002820)
DEBUG: ForStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=0, this=0x508000002820)
DEBUG: ForStmt - Lane 3 executing body for iteration 0 from statement 0 (Result-based)
DEBUG: ForStmt - Lane 3 no iteration block needed (first statement is control flow)
DEBUG: ForStmt - Lane 3 merge stack size: 3
  Stack[0]: sourceStatement=0x508000002820
  Stack[1]: sourceStatement=0x508000007820
  Stack[2]: sourceStatement=0x506000001640
  Looking for iterationMarker=0x508000007820
DEBUG: ForStmt - Lane 3 iteration merge point already found in merge stack
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 executing statement 0 in block 5 (Result-based)
DEBUG: IfStmt - Lane 3 resuming Result-based if statement
DEBUG: IfStmt - Lane 3 resuming execution (found at stack index=1, current stack depth=2, this=0x506000001640)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: IfStmt - Lane 3 in phase ExecutingBody (Result-based, stack depth=2, our index=1, this=0x506000001640)
DEBUG: IfStmt - Lane 3 executing else block from statement 1 (Result-based)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
DEBUG: ForStmt - Lane 3 child statement needs resume (Result-based)
  Block before: 5, Block after: 5
WARNING: getCurrentBlock - Lane 0 found in multiple blocks: 2, 7 (registry returned: 7)
WARNING: getCurrentBlock - Lane 1 found in multiple blocks: 2, 8 (registry returned: 8)
WARNING: getCurrentBlock - Lane 2 found in multiple blocks: 2, 5 (registry returned: 5)
WARNING: getCurrentBlock - Lane 3 found in multiple blocks: 2, 5 (registry returned: 5)
=== Order Independence Verification ===
✅ PASS: Program is order-independent!
Verified across 1 different thread orderings.

✅ Execution completed successfully!


=== STDERR ===

=== Starting HLSL Parse with AST Ownership ===
File: /home/t-zheychen/dxc_workspace/DirectXShaderCompiler/tools/clang/tools/dxc-fuzzer/examples/control_flow_for_if.hlsl
About to parse AST directly...
DEBUG: Captured ASTContext pointer: 0x529000000200
DEBUG: Found function: main
DEBUG: Captured main function: 0x521000050508
DEBUG: Analyzing variable reference: i
DEBUG: Variable i is a NamedDecl, checking semantics
DEBUG: Variable i is a VarDecl
DEBUG: Variable i not in cache, analyzing initialization
DEBUG: Variable i has initializer
DEBUG: Analyzing initializer for i
DEBUG: Checking initializer of type: ImplicitCastExpr
DEBUG: After IgnoreImpCasts, type is: IntegerLiteral
DEBUG: Found literal initializer - returning true
DEBUG: Initializer analysis result: deterministic
DEBUG: Cached result for i: deterministic
DEBUG: Analyzing variable reference: laneId
DEBUG: Variable laneId is a NamedDecl, checking semantics
DEBUG: Variable laneId is a VarDecl
DEBUG: Variable laneId not in cache, analyzing initialization
DEBUG: Variable laneId has initializer
DEBUG: Analyzing initializer for laneId
DEBUG: Checking initializer of type: CallExpr
DEBUG: After IgnoreImpCasts, type is: CallExpr
DEBUG: Unknown initializer type (CallExpr) - returning false
DEBUG: Initializer analysis result: non-deterministic
DEBUG: Cached result for laneId: non-deterministic
DEBUG: Analyzing variable reference: laneId
DEBUG: Variable laneId is a NamedDecl, checking semantics
DEBUG: Variable laneId is a VarDecl
DEBUG: Found laneId in cache: non-deterministic
collect_memory_operations_in_dbeg: Processing CompoundStmt
collect_memory_operations_in_dbeg: Processing DeclStmt
collect_memory_operations_in_dbeg: Processing CallExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing DeclStmt
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing ForStmt
collect_memory_operations_in_dbeg: Processing DeclStmt
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing BinaryOperator
  Found BinaryOperator, isAssignmentOp: 0
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing UnaryOperator
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing CompoundStmt
collect_memory_operations_in_dbeg: Processing IfStmt
collect_memory_operations_in_dbeg: Processing BinaryOperator
  Found BinaryOperator, isAssignmentOp: 0
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing CompoundStmt
collect_memory_operations_in_dbeg: Processing IfStmt
collect_memory_operations_in_dbeg: Processing BinaryOperator
  Found BinaryOperator, isAssignmentOp: 0
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing CompoundStmt
collect_memory_operations_in_dbeg: Processing CompoundAssignOperator
  Found BinaryOperator, isAssignmentOp: 1
  LHS type: DeclRefExpr
    is_shared_memory_access: checking DeclRefExpr
    Found DeclRefExpr
    Variable type: uint
  is_shared_memory_access(lhs): 0
    is_shared_memory_access: checking CallExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing CallExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing CompoundStmt
collect_memory_operations_in_dbeg: Processing CompoundAssignOperator
  Found BinaryOperator, isAssignmentOp: 1
  LHS type: DeclRefExpr
    is_shared_memory_access: checking DeclRefExpr
    Found DeclRefExpr
    Variable type: uint
  is_shared_memory_access(lhs): 0
    is_shared_memory_access: checking IntegerLiteral
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing CompoundStmt
collect_memory_operations_in_dbeg: Processing BinaryOperator
  Found BinaryOperator, isAssignmentOp: 1
  LHS type: DeclRefExpr
    is_shared_memory_access: checking DeclRefExpr
    Found DeclRefExpr
    Variable type: uint
  is_shared_memory_access(lhs): 0
    is_shared_memory_access: checking IntegerLiteral
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing DeclStmt
collect_memory_operations_in_dbeg: Processing CallExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing CompoundStmt
collect_synchronization_operations_in_dbeg: Processing DeclStmt
collect_synchronization_operations_in_dbeg: Processing CallExpr
Checking if WaveGetLaneIndex is a barrier operation
Found wave operation: WaveGetLaneIndex
Checking if WaveGetLaneIndex is a barrier operation
Found wave_operation call - adding to DBEG
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing DeclStmt
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing ForStmt
collect_synchronization_operations_in_dbeg: Processing DeclStmt
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing BinaryOperator
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing UnaryOperator
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing CompoundStmt
collect_synchronization_operations_in_dbeg: Processing IfStmt
collect_synchronization_operations_in_dbeg: Processing BinaryOperator
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing CompoundStmt
collect_synchronization_operations_in_dbeg: Processing IfStmt
collect_synchronization_operations_in_dbeg: Processing BinaryOperator
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing CompoundStmt
collect_synchronization_operations_in_dbeg: Processing CompoundAssignOperator
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing CallExpr
Checking if WaveActiveSum is a barrier operation
Found wave operation: WaveActiveSum
Checking if WaveActiveSum is a barrier operation
Found wave_operation call - adding to DBEG
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing CompoundStmt
collect_synchronization_operations_in_dbeg: Processing CompoundAssignOperator
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing CompoundStmt
collect_synchronization_operations_in_dbeg: Processing BinaryOperator
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing DeclStmt
collect_synchronization_operations_in_dbeg: Processing CallExpr
Checking if WaveActiveSum is a barrier operation
Found wave operation: WaveActiveSum
Checking if WaveActiveSum is a barrier operation
Found wave_operation call - adding to DBEG
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
Simplified DBEG: Single block with 32 threads and 96 memory operations

=== Cross-Dynamic-Block Analysis ===
Total memory operations: 96
Op 0: Thread 0 in DB0 wave_op
Op 1: Thread 1 in DB0 wave_op
Op 2: Thread 2 in DB0 wave_op
Op 3: Thread 3 in DB0 wave_op
Op 4: Thread 4 in DB0 wave_op
Op 5: Thread 5 in DB0 wave_op
Op 6: Thread 6 in DB0 wave_op
Op 7: Thread 7 in DB0 wave_op
Op 8: Thread 8 in DB0 wave_op
Op 9: Thread 9 in DB0 wave_op
Op 10: Thread 10 in DB0 wave_op
Op 11: Thread 11 in DB0 wave_op
Op 12: Thread 12 in DB0 wave_op
Op 13: Thread 13 in DB0 wave_op
Op 14: Thread 14 in DB0 wave_op
Op 15: Thread 15 in DB0 wave_op
Op 16: Thread 16 in DB0 wave_op
Op 17: Thread 17 in DB0 wave_op
Op 18: Thread 18 in DB0 wave_op
Op 19: Thread 19 in DB0 wave_op
Op 20: Thread 20 in DB0 wave_op
Op 21: Thread 21 in DB0 wave_op
Op 22: Thread 22 in DB0 wave_op
Op 23: Thread 23 in DB0 wave_op
Op 24: Thread 24 in DB0 wave_op
Op 25: Thread 25 in DB0 wave_op
Op 26: Thread 26 in DB0 wave_op
Op 27: Thread 27 in DB0 wave_op
Op 28: Thread 28 in DB0 wave_op
Op 29: Thread 29 in DB0 wave_op
Op 30: Thread 30 in DB0 wave_op
Op 31: Thread 31 in DB0 wave_op
Op 32: Thread 0 in DB0 wave_op
Op 33: Thread 1 in DB0 wave_op
Op 34: Thread 2 in DB0 wave_op
Op 35: Thread 3 in DB0 wave_op
Op 36: Thread 4 in DB0 wave_op
Op 37: Thread 5 in DB0 wave_op
Op 38: Thread 6 in DB0 wave_op
Op 39: Thread 7 in DB0 wave_op
Op 40: Thread 8 in DB0 wave_op
Op 41: Thread 9 in DB0 wave_op
Op 42: Thread 10 in DB0 wave_op
Op 43: Thread 11 in DB0 wave_op
Op 44: Thread 12 in DB0 wave_op
Op 45: Thread 13 in DB0 wave_op
Op 46: Thread 14 in DB0 wave_op
Op 47: Thread 15 in DB0 wave_op
Op 48: Thread 16 in DB0 wave_op
Op 49: Thread 17 in DB0 wave_op
Op 50: Thread 18 in DB0 wave_op
Op 51: Thread 19 in DB0 wave_op
Op 52: Thread 20 in DB0 wave_op
Op 53: Thread 21 in DB0 wave_op
Op 54: Thread 22 in DB0 wave_op
Op 55: Thread 23 in DB0 wave_op
Op 56: Thread 24 in DB0 wave_op
Op 57: Thread 25 in DB0 wave_op
Op 58: Thread 26 in DB0 wave_op
Op 59: Thread 27 in DB0 wave_op
Op 60: Thread 28 in DB0 wave_op
Op 61: Thread 29 in DB0 wave_op
Op 62: Thread 30 in DB0 wave_op
Op 63: Thread 31 in DB0 wave_op
Op 64: Thread 0 in DB0 wave_op
Op 65: Thread 1 in DB0 wave_op
Op 66: Thread 2 in DB0 wave_op
Op 67: Thread 3 in DB0 wave_op
Op 68: Thread 4 in DB0 wave_op
Op 69: Thread 5 in DB0 wave_op
Op 70: Thread 6 in DB0 wave_op
Op 71: Thread 7 in DB0 wave_op
Op 72: Thread 8 in DB0 wave_op
Op 73: Thread 9 in DB0 wave_op
Op 74: Thread 10 in DB0 wave_op
Op 75: Thread 11 in DB0 wave_op
Op 76: Thread 12 in DB0 wave_op
Op 77: Thread 13 in DB0 wave_op
Op 78: Thread 14 in DB0 wave_op
Op 79: Thread 15 in DB0 wave_op
Op 80: Thread 16 in DB0 wave_op
Op 81: Thread 17 in DB0 wave_op
Op 82: Thread 18 in DB0 wave_op
Op 83: Thread 19 in DB0 wave_op
Op 84: Thread 20 in DB0 wave_op
Op 85: Thread 21 in DB0 wave_op
Op 86: Thread 22 in DB0 wave_op
Op 87: Thread 23 in DB0 wave_op
Op 88: Thread 24 in DB0 wave_op
Op 89: Thread 25 in DB0 wave_op
Op 90: Thread 26 in DB0 wave_op
Op 91: Thread 27 in DB0 wave_op
Op 92: Thread 28 in DB0 wave_op
Op 93: Thread 29 in DB0 wave_op
Op 94: Thread 30 in DB0 wave_op
Op 95: Thread 31 in DB0 wave_op
SIMPLIFIED VALIDATION: Focusing on control flow determinism
Complex DBEG analysis disabled - moved to interpreter
Direct ParseAST complete
=== HLSL Parse with AST Ownership Complete ===
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
Executing collective wave operation for wave 0 at instruction 0x503000001a20 block 7
Collective wave operation result: 10
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 0 from WaitingForWave to Ready
  Waking up lane 1 from WaitingForResume to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 2 from WaitingForResume to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready

=== Dynamic Execution Graph (MiniHLSL Interpreter) ===
Threadgroup Size: 4
Wave Size: 32
Wave Count: 1
Total Dynamic Blocks: 9
Next Block ID: 10

Dynamic Block 1:
  Block ID: 1
  Block Type: REGULAR
  Parent Block: 0
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0

Dynamic Block 2:
  Block ID: 2
  Block Type: LOOP_HEADER
  Parent Block: 1
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x508000002820
  Participating Lanes by Wave:
    Wave 0: {0, 1, 2, 3} (4 lanes)
  Total Participating Lanes: 4
  Arrived Lanes by Wave:
    Wave 0: {0, 1, 2, 3} (4 lanes)

Dynamic Block 3:
  Block ID: 3
  Block Type: LOOP_EXIT
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x508000002820
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Lanes by Wave:
    Wave 0: {0, 1, 2, 3} (4 lanes)

Dynamic Block 4:
  Block ID: 4
  Block Type: BRANCH_THEN
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x506000001640
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0

Dynamic Block 5:
  Block ID: 5
  Block Type: BRANCH_ELSE
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x506000001640
  Participating Lanes by Wave:
    Wave 0: {2, 3} (2 lanes)
  Total Participating Lanes: 2
  Arrived Lanes by Wave:
    Wave 0: {2, 3} (2 lanes)

Dynamic Block 6:
  Block ID: 6
  Block Type: MERGE
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x506000001640
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Lanes by Wave:
    Wave 0: {0, 1, 2, 3} (4 lanes)

Dynamic Block 7:
  Block ID: 7
  Block Type: BRANCH_THEN
  Parent Block: 4
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x5060000015e0
  Participating Lanes by Wave:
    Wave 0: {0} (1 lanes)
  Total Participating Lanes: 1
  Arrived Lanes by Wave:
    Wave 0: {0} (1 lanes)
  Instructions (1):
    0: WaveActiveOp (ptr: 0x503000001a20)

Dynamic Block 8:
  Block ID: 8
  Block Type: BRANCH_ELSE
  Parent Block: 4
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x5060000015e0
  Participating Lanes by Wave:
    Wave 0: {1} (1 lanes)
  Total Participating Lanes: 1
  Arrived Lanes by Wave:
    Wave 0: {1} (1 lanes)

Dynamic Block 9:
  Block ID: 9
  Block Type: MERGE
  Parent Block: 4
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x5060000015e0
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Lanes by Wave:
    Wave 0: {0, 1} (2 lanes)

=== Wave States ===
Wave 0:
  Wave Size: 32
  Lane Count: 4
  Active Lanes: 4
  Currently Active Lanes: 4
  Lane to Block Mapping (from registry):
    Lane 0 -> Block 7
    Lane 1 -> Block 8
    Lane 2 -> Block 5
    Lane 3 -> Block 5
  Active Sync Points (1):
    Instruction 0x503000001a20 block 7 (WaveActiveOp):
      Expected: 1 lanes
      Arrived: 1 lanes
      Ready to execute: No

=== End Dynamic Execution Graph ===


=== Final Variable Values ===
Wave 0:
  Lane 0:
    i = 0
    laneId = 0
    result = 10
    (state: Ready)
  Lane 1:
    i = 0
    laneId = 1
    result = 1
    (state: Ready)
  Lane 2:
    i = 0
    laneId = 2
    result = 2
    (state: Ready)
  Lane 3:
    i = 0
    laneId = 3
    result = 2
    (state: WaitingForResume)
=== End Variable Values ===

  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
Executing collective wave operation for wave 0 at instruction 0x503000001a20 block 7
Collective wave operation result: 10
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 0 from WaitingForWave to Ready
  Waking up lane 1 from WaitingForResume to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 2 from WaitingForResume to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready

=== Dynamic Execution Graph (MiniHLSL Interpreter) ===
Threadgroup Size: 4
Wave Size: 32
Wave Count: 1
Total Dynamic Blocks: 9
Next Block ID: 10

Dynamic Block 1:
  Block ID: 1
  Block Type: REGULAR
  Parent Block: 0
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0

Dynamic Block 2:
  Block ID: 2
  Block Type: LOOP_HEADER
  Parent Block: 1
  Program Point: 62371
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x508000002820
  Participating Lanes by Wave:
    Wave 0: {0, 1, 2, 3} (4 lanes)
  Total Participating Lanes: 4
  Arrived Lanes by Wave:
    Wave 0: {0, 1, 2, 3} (4 lanes)

Dynamic Block 3:
  Block ID: 3
  Block Type: LOOP_EXIT
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x508000002820
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Lanes by Wave:
    Wave 0: {0, 1, 2, 3} (4 lanes)

Dynamic Block 4:
  Block ID: 4
  Block Type: BRANCH_THEN
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x506000001640
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0

Dynamic Block 5:
  Block ID: 5
  Block Type: BRANCH_ELSE
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x506000001640
  Participating Lanes by Wave:
    Wave 0: {2, 3} (2 lanes)
  Total Participating Lanes: 2
  Arrived Lanes by Wave:
    Wave 0: {2, 3} (2 lanes)

Dynamic Block 6:
  Block ID: 6
  Block Type: MERGE
  Parent Block: 2
  Program Point: 227168
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x506000001640
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Lanes by Wave:
    Wave 0: {0, 1, 2, 3} (4 lanes)

Dynamic Block 7:
  Block ID: 7
  Block Type: BRANCH_THEN
  Parent Block: 4
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x5060000015e0
  Participating Lanes by Wave:
    Wave 0: {0} (1 lanes)
  Total Participating Lanes: 1
  Arrived Lanes by Wave:
    Wave 0: {0} (1 lanes)
  Instructions (1):
    0: WaveActiveOp (ptr: 0x503000001a20)

Dynamic Block 8:
  Block ID: 8
  Block Type: BRANCH_ELSE
  Parent Block: 4
  Program Point: 227856
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x5060000015e0
  Participating Lanes by Wave:
    Wave 0: {1} (1 lanes)
  Total Participating Lanes: 1
  Arrived Lanes by Wave:
    Wave 0: {1} (1 lanes)

Dynamic Block 9:
  Block ID: 9
  Block Type: MERGE
  Parent Block: 4
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x5060000015e0
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Lanes by Wave:
    Wave 0: {0, 1} (2 lanes)

=== Wave States ===
Wave 0:
  Wave Size: 32
  Lane Count: 4
  Active Lanes: 4
  Currently Active Lanes: 4
  Lane to Block Mapping (from registry):
    Lane 0 -> Block 7
    Lane 1 -> Block 8
    Lane 2 -> Block 5
    Lane 3 -> Block 5
  Active Sync Points (1):
    Instruction 0x503000001a20 block 7 (WaveActiveOp):
      Expected: 1 lanes
      Arrived: 1 lanes
      Ready to execute: No

=== End Dynamic Execution Graph ===


=== Final Variable Values ===
Wave 0:
  Lane 0:
    i = 0
    laneId = 0
    result = 10
    (state: Ready)
  Lane 1:
    i = 0
    laneId = 1
    result = 1
    (state: Ready)
  Lane 2:
    i = 0
    laneId = 2
    result = 2
    (state: Ready)
  Lane 3:
    i = 0
    laneId = 3
    result = 2
    (state: WaitingForResume)
=== End Variable Values ===



=== VERIFICATION ===
⚠️  totalSum: expected 26, but not found in output

