=== COMMAND ===
/home/t-zheychen/dxc_workspace/DirectXShaderCompiler/build-fuzzer/bin/minihlsl-standalone -o 1 /home/t-zheychen/dxc_workspace/DirectXShaderCompiler/tools/clang/tools/dxc-fuzzer/examples/control_flow_do_while.hlsl

=== RETURN CODE ===
0

=== STDOUT ===
MiniHLSL Interpreter
====================
Input file: /home/t-zheychen/dxc_workspace/DirectXShaderCompiler/tools/clang/tools/dxc-fuzzer/examples/control_flow_do_while.hlsl
Wave size: 32
Order verification: 1 orderings

Converting HLSL function: main
Found numthreads attribute: [4, 1, 1]
Converting compound statement with 5 child statements
Converting statement: DeclStmt
Converting declaration statement
Declaring variable: laneId
Converting expression: CallExpr
Converting function call to expression: WaveGetLaneIndex
Converting statement: DeclStmt
Converting declaration statement
Declaring variable: result
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
Converting statement: DeclStmt
Converting declaration statement
Declaring variable: i
Converting expression: ImplicitCastExpr
Converting expression: IntegerLiteral
Converting statement: DoStmt
Converting do-while statement
Converting statement: CompoundAssignOperator
Converting compound assignment operator
Converting expression: DeclRefExpr
Converting expression: ImplicitCastExpr
Converting expression: CallExpr
Converting function call to expression: WaveActiveSum
Converting expression: IntegerLiteral
Converting statement: UnaryOperator
Converting expression: UnaryOperator
Converting expression: DeclRefExpr
Converting expression: BinaryOperator
Converting expression: ImplicitCastExpr
Converting expression: ImplicitCastExpr
Converting expression: DeclRefExpr
Converting expression: ImplicitCastExpr
Converting expression: DeclRefExpr
Converting statement: DeclStmt
Converting declaration statement
Declaring variable: totalSum
Converting expression: CallExpr
Converting function call to expression: WaveActiveSum
Converting expression: ImplicitCastExpr
Converting expression: DeclRefExpr
Converted AST to interpreter program with 5 statements
Thread configuration: [4, 1, 1]

DEBUG: findOrCreateBlockForPath called with 0 waves of unknown lanes
DEBUG: removeUnknownLane - removing lane 0 from unknown lanes of block 1
DEBUG: removeUnknownLane - removing lane 1 from unknown lanes of block 1
DEBUG: removeUnknownLane - removing lane 2 from unknown lanes of block 1
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 1
DEBUG: DoWhileStmt - Lane 0 starting do-while loop
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 2
DEBUG: addUnknownLane - added lane 0 to unknown lanes of block 2
DEBUG: addUnknownLane - adding lane 1 to new block 2
DEBUG: addUnknownLane - added lane 1 to unknown lanes of block 2
DEBUG: addUnknownLane - adding lane 2 to new block 2
DEBUG: addUnknownLane - added lane 2 to unknown lanes of block 2
DEBUG: addUnknownLane - adding lane 3 to new block 2
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 2
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 3
DEBUG: addUnknownLane - added lane 0 to unknown lanes of block 3
DEBUG: addUnknownLane - adding lane 1 to new block 3
DEBUG: addUnknownLane - added lane 1 to unknown lanes of block 3
DEBUG: addUnknownLane - adding lane 2 to new block 3
DEBUG: addUnknownLane - added lane 2 to unknown lanes of block 3
DEBUG: addUnknownLane - adding lane 3 to new block 3
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 3
DEBUG: DoWhileStmt - Lane 0 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 0 needs iteration block (first statement is not control flow)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 4
DEBUG: addUnknownLane - added lane 0 to unknown lanes of block 4
DEBUG: addUnknownLane - adding lane 1 to new block 4
DEBUG: addUnknownLane - added lane 1 to unknown lanes of block 4
DEBUG: addUnknownLane - adding lane 2 to new block 4
DEBUG: addUnknownLane - added lane 2 to unknown lanes of block 4
DEBUG: addUnknownLane - adding lane 3 to new block 4
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 4
DEBUG: DoWhileStmt - Lane 0 created iteration starting block 4 for iteration 0
DEBUG: assignLaneToBlock - moving lane 0 from block 1 (type 0) to block 4 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from arrivedLanes of block 1
DEBUG: assignLaneToBlock - adding lane 0 to block 4
DEBUG: assignLaneToBlock - block 4 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 0 moved to iteration starting block 4 for iteration 0
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 0 cannot execute, starting to wait in block 4
DEBUG: WAVE_OP: Refreshed block 4 resolution status
DEBUG: Block 4 wave 0 unknown lanes: {1 2 3 }
DEBUG: canExecuteWaveInstruction for lane 0 in block 4: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: AssignStmt - Lane 0 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 0 waiting for wave operation in phase 5 at statement 0, iteration 0
DEBUG: WAVE_WAIT: Lane 0 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 1 starting do-while loop
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: DoWhileStmt - Lane 1 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 1 needs iteration block (first statement is not control flow)
DEBUG: DoWhileStmt - Lane 1 found existing iteration starting block 4 for iteration 0
DEBUG: assignLaneToBlock - moving lane 1 from block 1 (type 0) to block 4 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from arrivedLanes of block 1
DEBUG: assignLaneToBlock - adding lane 1 to block 4
DEBUG: assignLaneToBlock - block 4 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 1 moved to iteration starting block 4 for iteration 0
DEBUG: WAVE_OP: Lane 1 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 1 cannot execute, starting to wait in block 4
DEBUG: WAVE_OP: Refreshed block 4 resolution status
DEBUG: Block 4 wave 0 unknown lanes: {2 3 }
DEBUG: canExecuteWaveInstruction for lane 1 in block 4: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: AssignStmt - Lane 1 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 1 waiting for wave operation in phase 5 at statement 0, iteration 0
DEBUG: WAVE_WAIT: Lane 1 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 2 starting do-while loop
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: DoWhileStmt - Lane 2 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 2 needs iteration block (first statement is not control flow)
DEBUG: DoWhileStmt - Lane 2 found existing iteration starting block 4 for iteration 0
DEBUG: assignLaneToBlock - moving lane 2 from block 1 (type 0) to block 4 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 1
DEBUG: assignLaneToBlock - adding lane 2 to block 4
DEBUG: assignLaneToBlock - block 4 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 2 moved to iteration starting block 4 for iteration 0
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 2 cannot execute, starting to wait in block 4
DEBUG: WAVE_OP: Refreshed block 4 resolution status
DEBUG: Block 4 wave 0 unknown lanes: {3 }
DEBUG: canExecuteWaveInstruction for lane 2 in block 4: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: AssignStmt - Lane 2 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 2 waiting for wave operation in phase 5 at statement 0, iteration 0
DEBUG: WAVE_WAIT: Lane 2 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 3 starting do-while loop
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: DoWhileStmt - Lane 3 found existing iteration starting block 4 for iteration 0
DEBUG: assignLaneToBlock - moving lane 3 from block 1 (type 0) to block 4 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 1
DEBUG: assignLaneToBlock - adding lane 3 to block 4
DEBUG: assignLaneToBlock - block 4 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 moved to iteration starting block 4 for iteration 0
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 3 cannot execute, starting to wait in block 4
DEBUG: WAVE_OP: Refreshed block 4 resolution status
DEBUG: Block 4 wave 0 unknown lanes: {}
DEBUG: areAllParticipantsKnownForWaveInstruction - All participants known for sync point
DEBUG: canExecuteWaveInstruction for lane 3 in block 4: canExecuteInBlock=1, allParticipantsKnown=1, allParticipantsArrived=1, canExecuteGlobal=1, syncPointPhase=phase_1
DEBUG: WAVE_OP: After lane 3 started waiting, wave operation can now execute!
DEBUG: WAVE_OP: Updated sync point - allParticipantsKnown=1, allParticipantsArrived=1, readyToExecute=0
DEBUG: AssignStmt - Lane 3 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 3 waiting for wave operation in phase 5 at statement 0, iteration 0
DEBUG: WAVE_WAIT: Lane 3 caught WaveOperationWaitException, state=2
DEBUG: WAVE_OP: Storing collective result for lanes: 0 1 2 3  (phase: 2)
DEBUG: DoWhileStmt - Lane 0 resuming do-while loop
DEBUG: DoWhileStmt - Lane 0 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 0 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 0 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 0 retrieving stored wave result: 4 (phase: 2)
DEBUG: assignLaneToBlock - moving lane 0 from block 4 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from arrivedLanes of block 4
DEBUG: assignLaneToBlock - adding lane 0 to block 2
DEBUG: assignLaneToBlock - block 2 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 0 completed body for iteration 0
DEBUG: DoWhileStmt - Lane 1 resuming do-while loop
DEBUG: DoWhileStmt - Lane 1 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 1 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 1 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 1 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 1 retrieving stored wave result: 4 (phase: 2)
DEBUG: assignLaneToBlock - moving lane 1 from block 4 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from arrivedLanes of block 4
DEBUG: assignLaneToBlock - adding lane 1 to block 2
DEBUG: assignLaneToBlock - block 2 now has 2 participating lanes
DEBUG: DoWhileStmt - Lane 1 completed body for iteration 0
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 2 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 2 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 2 retrieving stored wave result: 4 (phase: 2)
DEBUG: assignLaneToBlock - moving lane 2 from block 4 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 4
DEBUG: assignLaneToBlock - adding lane 2 to block 2
DEBUG: assignLaneToBlock - block 2 now has 3 participating lanes
DEBUG: DoWhileStmt - Lane 2 completed body for iteration 0
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 3 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 3 retrieving stored wave result: 4 (phase: 3)
DEBUG: assignLaneToBlock - moving lane 3 from block 4 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 4
DEBUG: assignLaneToBlock - adding lane 3 to block 2
DEBUG: assignLaneToBlock - block 2 now has 4 participating lanes
DEBUG: DoWhileStmt - Lane 3 completed body for iteration 0
DEBUG: DoWhileStmt - Lane 0 resuming do-while loop
DEBUG: DoWhileStmt - Lane 0 evaluating condition after iteration 0
DEBUG: removeThreadFromAllSets - removing lane 0 from all sets of block 2
DEBUG: removeThreadFromAllSets - block 2 had 3 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 0 from unknown lanes of block 2
DEBUG: removeThreadFromAllSets - Block 2 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 2 has 3 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - skipping 3 (LOOP_EXIT block where lanes should go)
DEBUG: removeThreadFromNestedBlocks - removing lane 0 from block 4 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 0 from all sets of block 4
DEBUG: removeThreadFromAllSets - block 4 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 0 from unknown lanes of block 4
DEBUG: removeThreadFromAllSets - Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 4 has 0 participating lanes after removal
DEBUG: DoWhileStmt - Lane 1 resuming do-while loop
DEBUG: DoWhileStmt - Lane 1 evaluating condition after iteration 0
DEBUG: removeThreadFromAllSets - removing lane 1 from all sets of block 2
DEBUG: removeThreadFromAllSets - block 2 had 2 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 1 from unknown lanes of block 2
DEBUG: removeThreadFromAllSets - Block 2 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 2 has 2 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - skipping 3 (LOOP_EXIT block where lanes should go)
DEBUG: removeThreadFromNestedBlocks - removing lane 1 from block 4 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 1 from all sets of block 4
DEBUG: removeThreadFromAllSets - block 4 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 1 from unknown lanes of block 4
DEBUG: removeThreadFromAllSets - Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 4 has 0 participating lanes after removal
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 evaluating condition after iteration 0
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 evaluating condition after iteration 0
DEBUG: DoWhileStmt - Lane 0 resuming do-while loop
DEBUG: DoWhileStmt - Lane 0 reconverging from do-while loop
DEBUG: assignLaneToBlock - moving lane 0 from block 2 (type 4) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 0 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: assignLaneToBlock - moving lane 0 from block 3 (type 6) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from arrivedLanes of block 3
DEBUG: assignLaneToBlock - adding lane 0 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 1 resuming do-while loop
DEBUG: DoWhileStmt - Lane 1 reconverging from do-while loop
DEBUG: assignLaneToBlock - moving lane 1 from block 2 (type 4) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 1 to block 3
DEBUG: assignLaneToBlock - block 3 now has 2 participating lanes
DEBUG: assignLaneToBlock - moving lane 1 from block 3 (type 6) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from arrivedLanes of block 3
DEBUG: assignLaneToBlock - adding lane 1 to block 3
DEBUG: assignLaneToBlock - block 3 now has 2 participating lanes
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 executing body for iteration 1 from statement 0
DEBUG: DoWhileStmt - Lane 2 needs iteration block (first statement is not control flow)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {2 3 } (2 lanes)
DEBUG: addUnknownLane - adding lane 2 to new block 5
DEBUG: addUnknownLane - added lane 2 to unknown lanes of block 5
DEBUG: addUnknownLane - adding lane 3 to new block 5
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 5
DEBUG: DoWhileStmt - Lane 2 created iteration starting block 5 for iteration 1
DEBUG: assignLaneToBlock - moving lane 2 from block 2 (type 4) to block 5 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 2 to block 5
DEBUG: assignLaneToBlock - block 5 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 2 moved to iteration starting block 5 for iteration 1
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 5, instruction key=(0x5030000018a0,5)
DEBUG: WAVE_OP: Lane 2 cannot execute, starting to wait in block 5
DEBUG: WAVE_OP: Refreshed block 5 resolution status
DEBUG: Block 5 wave 0 unknown lanes: {3 }
DEBUG: canExecuteWaveInstruction for lane 2 in block 5: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: AssignStmt - Lane 2 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 2 waiting for wave operation in phase 5 at statement 0, iteration 1
DEBUG: WAVE_WAIT: Lane 2 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 1 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: DoWhileStmt - Lane 3 found existing iteration starting block 5 for iteration 1
DEBUG: assignLaneToBlock - moving lane 3 from block 2 (type 4) to block 5 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 3 to block 5
DEBUG: assignLaneToBlock - block 5 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 moved to iteration starting block 5 for iteration 1
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 5, instruction key=(0x5030000018a0,5)
DEBUG: WAVE_OP: Lane 3 cannot execute, starting to wait in block 5
DEBUG: WAVE_OP: Refreshed block 5 resolution status
DEBUG: Block 5 wave 0 unknown lanes: {}
DEBUG: areAllParticipantsKnownForWaveInstruction - All participants known for sync point
DEBUG: canExecuteWaveInstruction for lane 3 in block 5: canExecuteInBlock=1, allParticipantsKnown=1, allParticipantsArrived=1, canExecuteGlobal=1, syncPointPhase=phase_1
DEBUG: WAVE_OP: After lane 3 started waiting, wave operation can now execute!
DEBUG: WAVE_OP: Updated sync point - allParticipantsKnown=1, allParticipantsArrived=1, readyToExecute=0
DEBUG: AssignStmt - Lane 3 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 3 waiting for wave operation in phase 5 at statement 0, iteration 1
DEBUG: WAVE_WAIT: Lane 3 caught WaveOperationWaitException, state=2
DEBUG: WAVE_OP: Storing collective result for lanes: 2 3  (phase: 2)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 0 cannot execute, starting to wait in block 3
DEBUG: WAVE_OP: Refreshed block 3 resolution status
DEBUG: Block 3 wave 0 unknown lanes: {2 3 }
DEBUG: canExecuteWaveInstruction for lane 0 in block 3: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=0, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: VarDeclStmt - Lane 0 caught WaveOperationWaitException, re-throwing
DEBUG: WAVE_WAIT: Lane 0 caught WaveOperationWaitException, state=2
DEBUG: WAVE_OP: Lane 1 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 1 cannot execute, starting to wait in block 3
DEBUG: WAVE_OP: Refreshed block 3 resolution status
DEBUG: Block 3 wave 0 unknown lanes: {2 3 }
DEBUG: canExecuteWaveInstruction for lane 1 in block 3: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: VarDeclStmt - Lane 1 caught WaveOperationWaitException, re-throwing
DEBUG: WAVE_WAIT: Lane 1 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 executing body for iteration 1 from statement 0
DEBUG: DoWhileStmt - Lane 2 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 5, instruction key=(0x5030000018a0,5)
DEBUG: WAVE_OP: Lane 2 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 2 retrieving stored wave result: 2 (phase: 2)
DEBUG: assignLaneToBlock - moving lane 2 from block 5 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 5
DEBUG: assignLaneToBlock - adding lane 2 to block 2
DEBUG: assignLaneToBlock - block 2 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 2 completed body for iteration 1
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 1 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 5, instruction key=(0x5030000018a0,5)
DEBUG: WAVE_OP: Lane 3 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 3 retrieving stored wave result: 2 (phase: 3)
DEBUG: assignLaneToBlock - moving lane 3 from block 5 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 5
DEBUG: assignLaneToBlock - adding lane 3 to block 2
DEBUG: assignLaneToBlock - block 2 now has 2 participating lanes
DEBUG: DoWhileStmt - Lane 3 completed body for iteration 1
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 evaluating condition after iteration 1
DEBUG: removeThreadFromAllSets - removing lane 2 from all sets of block 2
DEBUG: removeThreadFromAllSets - block 2 had 1 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 2 from unknown lanes of block 2
DEBUG: removeThreadFromAllSets - Block 2 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 2 has 1 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - skipping 3 (LOOP_EXIT block where lanes should go)
DEBUG: removeThreadFromNestedBlocks - removing lane 2 from block 4 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 2 from all sets of block 4
DEBUG: removeThreadFromAllSets - block 4 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 2 from unknown lanes of block 4
DEBUG: removeThreadFromAllSets - Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 4 has 0 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - removing lane 2 from block 5 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 2 from all sets of block 5
DEBUG: removeThreadFromAllSets - block 5 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 2 from unknown lanes of block 5
DEBUG: removeThreadFromAllSets - Block 5 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 5 has 0 participating lanes after removal
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 evaluating condition after iteration 1
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 reconverging from do-while loop
DEBUG: assignLaneToBlock - moving lane 2 from block 2 (type 4) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 2 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: assignLaneToBlock - moving lane 2 from block 3 (type 6) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 3
DEBUG: assignLaneToBlock - adding lane 2 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 2 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {3 } (1 lanes)
DEBUG: addUnknownLane - adding lane 3 to new block 6
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 6
DEBUG: DoWhileStmt - Lane 3 created iteration starting block 6 for iteration 2
DEBUG: assignLaneToBlock - moving lane 3 from block 2 (type 4) to block 6 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 3 to block 6
DEBUG: assignLaneToBlock - block 6 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 moved to iteration starting block 6 for iteration 2
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 6, instruction key=(0x5030000018a0,6)
DEBUG: WAVE_OP: Lane 3 cannot execute, starting to wait in block 6
DEBUG: WAVE_OP: Refreshed block 6 resolution status
DEBUG: Block 6 wave 0 unknown lanes: {}
DEBUG: areAllParticipantsKnownForWaveInstruction - All participants known for sync point
DEBUG: canExecuteWaveInstruction for lane 3 in block 6: canExecuteInBlock=1, allParticipantsKnown=1, allParticipantsArrived=1, canExecuteGlobal=1, syncPointPhase=phase_1
DEBUG: WAVE_OP: After lane 3 started waiting, wave operation can now execute!
DEBUG: WAVE_OP: Updated sync point - allParticipantsKnown=1, allParticipantsArrived=1, readyToExecute=0
DEBUG: AssignStmt - Lane 3 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 3 waiting for wave operation in phase 5 at statement 0, iteration 2
DEBUG: WAVE_WAIT: Lane 3 caught WaveOperationWaitException, state=2
DEBUG: WAVE_OP: Storing collective result for lanes: 3  (phase: 2)
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 2 cannot execute, starting to wait in block 3
DEBUG: WAVE_OP: Refreshed block 3 resolution status
DEBUG: Block 3 wave 0 unknown lanes: {3 }
DEBUG: canExecuteWaveInstruction for lane 2 in block 3: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: VarDeclStmt - Lane 2 caught WaveOperationWaitException, re-throwing
DEBUG: WAVE_WAIT: Lane 2 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 2 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 6, instruction key=(0x5030000018a0,6)
DEBUG: WAVE_OP: Lane 3 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 3 retrieving stored wave result: 1 (phase: 3)
DEBUG: assignLaneToBlock - moving lane 3 from block 6 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 6
DEBUG: assignLaneToBlock - adding lane 3 to block 2
DEBUG: assignLaneToBlock - block 2 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 completed body for iteration 2
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 evaluating condition after iteration 2
DEBUG: removeThreadFromAllSets - removing lane 3 from all sets of block 2
DEBUG: removeThreadFromAllSets - block 2 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 2
DEBUG: removeThreadFromAllSets - Block 2 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 2 has 0 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - skipping 3 (LOOP_EXIT block where lanes should go)
DEBUG: removeThreadFromNestedBlocks - removing lane 3 from block 4 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 3 from all sets of block 4
DEBUG: removeThreadFromAllSets - block 4 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 4
DEBUG: removeThreadFromAllSets - Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 4 has 0 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - removing lane 3 from block 5 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 3 from all sets of block 5
DEBUG: removeThreadFromAllSets - block 5 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 5
DEBUG: removeThreadFromAllSets - Block 5 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 5 has 0 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - removing lane 3 from block 6 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 3 from all sets of block 6
DEBUG: removeThreadFromAllSets - block 6 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 6
DEBUG: removeThreadFromAllSets - Block 6 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 6 has 0 participating lanes after removal
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 reconverging from do-while loop
DEBUG: assignLaneToBlock - moving lane 3 from block 2 (type 4) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 3 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: assignLaneToBlock - moving lane 3 from block 3 (type 6) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 3
DEBUG: assignLaneToBlock - adding lane 3 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: WAVE_OP: Updated participants before execution to include all current block lanes: 0 1 2 3 
DEBUG: WAVE_OP: Storing collective result for lanes: 0 1 2 3  (phase: 2)
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 0 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 0 retrieving stored wave result: 21 (phase: 2)
DEBUG: WAVE_OP: Lane 1 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 1 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 1 retrieving stored wave result: 21 (phase: 2)
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 2 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 2 retrieving stored wave result: 21 (phase: 3)
lane 3 have completed execution
lane 0 have completed execution
lane 1 have completed execution
lane 2 have completed execution
=== Sequential Execution ===
✅ Execution successful
Thread Return Values:
  Thread 0: 0
  Thread 1: 0
  Thread 2: 0
  Thread 3: 0

DEBUG: findOrCreateBlockForPath called with 0 waves of unknown lanes
DEBUG: removeUnknownLane - removing lane 0 from unknown lanes of block 1
DEBUG: removeUnknownLane - removing lane 1 from unknown lanes of block 1
DEBUG: removeUnknownLane - removing lane 2 from unknown lanes of block 1
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 1
DEBUG: DoWhileStmt - Lane 0 starting do-while loop
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 2
DEBUG: addUnknownLane - added lane 0 to unknown lanes of block 2
DEBUG: addUnknownLane - adding lane 1 to new block 2
DEBUG: addUnknownLane - added lane 1 to unknown lanes of block 2
DEBUG: addUnknownLane - adding lane 2 to new block 2
DEBUG: addUnknownLane - added lane 2 to unknown lanes of block 2
DEBUG: addUnknownLane - adding lane 3 to new block 2
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 2
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 3
DEBUG: addUnknownLane - added lane 0 to unknown lanes of block 3
DEBUG: addUnknownLane - adding lane 1 to new block 3
DEBUG: addUnknownLane - added lane 1 to unknown lanes of block 3
DEBUG: addUnknownLane - adding lane 2 to new block 3
DEBUG: addUnknownLane - added lane 2 to unknown lanes of block 3
DEBUG: addUnknownLane - adding lane 3 to new block 3
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 3
DEBUG: DoWhileStmt - Lane 0 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 0 needs iteration block (first statement is not control flow)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: addUnknownLane - adding lane 0 to new block 4
DEBUG: addUnknownLane - added lane 0 to unknown lanes of block 4
DEBUG: addUnknownLane - adding lane 1 to new block 4
DEBUG: addUnknownLane - added lane 1 to unknown lanes of block 4
DEBUG: addUnknownLane - adding lane 2 to new block 4
DEBUG: addUnknownLane - added lane 2 to unknown lanes of block 4
DEBUG: addUnknownLane - adding lane 3 to new block 4
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 4
DEBUG: DoWhileStmt - Lane 0 created iteration starting block 4 for iteration 0
DEBUG: assignLaneToBlock - moving lane 0 from block 1 (type 0) to block 4 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from arrivedLanes of block 1
DEBUG: assignLaneToBlock - adding lane 0 to block 4
DEBUG: assignLaneToBlock - block 4 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 0 moved to iteration starting block 4 for iteration 0
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 0 cannot execute, starting to wait in block 4
DEBUG: WAVE_OP: Refreshed block 4 resolution status
DEBUG: Block 4 wave 0 unknown lanes: {1 2 3 }
DEBUG: canExecuteWaveInstruction for lane 0 in block 4: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: AssignStmt - Lane 0 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 0 waiting for wave operation in phase 5 at statement 0, iteration 0
DEBUG: WAVE_WAIT: Lane 0 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 1 starting do-while loop
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: DoWhileStmt - Lane 1 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 1 needs iteration block (first statement is not control flow)
DEBUG: DoWhileStmt - Lane 1 found existing iteration starting block 4 for iteration 0
DEBUG: assignLaneToBlock - moving lane 1 from block 1 (type 0) to block 4 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from arrivedLanes of block 1
DEBUG: assignLaneToBlock - adding lane 1 to block 4
DEBUG: assignLaneToBlock - block 4 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 1 moved to iteration starting block 4 for iteration 0
DEBUG: WAVE_OP: Lane 1 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 1 cannot execute, starting to wait in block 4
DEBUG: WAVE_OP: Refreshed block 4 resolution status
DEBUG: Block 4 wave 0 unknown lanes: {2 3 }
DEBUG: canExecuteWaveInstruction for lane 1 in block 4: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: AssignStmt - Lane 1 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 1 waiting for wave operation in phase 5 at statement 0, iteration 0
DEBUG: WAVE_WAIT: Lane 1 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 2 starting do-while loop
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: DoWhileStmt - Lane 2 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 2 needs iteration block (first statement is not control flow)
DEBUG: DoWhileStmt - Lane 2 found existing iteration starting block 4 for iteration 0
DEBUG: assignLaneToBlock - moving lane 2 from block 1 (type 0) to block 4 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 1
DEBUG: assignLaneToBlock - adding lane 2 to block 4
DEBUG: assignLaneToBlock - block 4 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 2 moved to iteration starting block 4 for iteration 0
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 2 cannot execute, starting to wait in block 4
DEBUG: WAVE_OP: Refreshed block 4 resolution status
DEBUG: Block 4 wave 0 unknown lanes: {3 }
DEBUG: canExecuteWaveInstruction for lane 2 in block 4: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: AssignStmt - Lane 2 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 2 waiting for wave operation in phase 5 at statement 0, iteration 0
DEBUG: WAVE_WAIT: Lane 2 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 3 starting do-while loop
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 2 - not modifying unknown lanes
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {0 1 2 3 } (4 lanes)
DEBUG: Found existing block 3 - not modifying unknown lanes
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: DoWhileStmt - Lane 3 found existing iteration starting block 4 for iteration 0
DEBUG: assignLaneToBlock - moving lane 3 from block 1 (type 0) to block 4 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 1
DEBUG: assignLaneToBlock - adding lane 3 to block 4
DEBUG: assignLaneToBlock - block 4 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 moved to iteration starting block 4 for iteration 0
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 3 cannot execute, starting to wait in block 4
DEBUG: WAVE_OP: Refreshed block 4 resolution status
DEBUG: Block 4 wave 0 unknown lanes: {}
DEBUG: areAllParticipantsKnownForWaveInstruction - All participants known for sync point
DEBUG: canExecuteWaveInstruction for lane 3 in block 4: canExecuteInBlock=1, allParticipantsKnown=1, allParticipantsArrived=1, canExecuteGlobal=1, syncPointPhase=phase_1
DEBUG: WAVE_OP: After lane 3 started waiting, wave operation can now execute!
DEBUG: WAVE_OP: Updated sync point - allParticipantsKnown=1, allParticipantsArrived=1, readyToExecute=0
DEBUG: AssignStmt - Lane 3 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 3 waiting for wave operation in phase 5 at statement 0, iteration 0
DEBUG: WAVE_WAIT: Lane 3 caught WaveOperationWaitException, state=2
DEBUG: WAVE_OP: Storing collective result for lanes: 0 1 2 3  (phase: 2)
DEBUG: DoWhileStmt - Lane 0 resuming do-while loop
DEBUG: DoWhileStmt - Lane 0 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 0 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 0 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 0 retrieving stored wave result: 4 (phase: 2)
DEBUG: assignLaneToBlock - moving lane 0 from block 4 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from arrivedLanes of block 4
DEBUG: assignLaneToBlock - adding lane 0 to block 2
DEBUG: assignLaneToBlock - block 2 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 0 completed body for iteration 0
DEBUG: DoWhileStmt - Lane 1 resuming do-while loop
DEBUG: DoWhileStmt - Lane 1 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 1 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 1 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 1 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 1 retrieving stored wave result: 4 (phase: 2)
DEBUG: assignLaneToBlock - moving lane 1 from block 4 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from arrivedLanes of block 4
DEBUG: assignLaneToBlock - adding lane 1 to block 2
DEBUG: assignLaneToBlock - block 2 now has 2 participating lanes
DEBUG: DoWhileStmt - Lane 1 completed body for iteration 0
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 2 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 2 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 2 retrieving stored wave result: 4 (phase: 2)
DEBUG: assignLaneToBlock - moving lane 2 from block 4 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 4
DEBUG: assignLaneToBlock - adding lane 2 to block 2
DEBUG: assignLaneToBlock - block 2 now has 3 participating lanes
DEBUG: DoWhileStmt - Lane 2 completed body for iteration 0
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 0 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 4, instruction key=(0x5030000018a0,4)
DEBUG: WAVE_OP: Lane 3 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 3 retrieving stored wave result: 4 (phase: 3)
DEBUG: assignLaneToBlock - moving lane 3 from block 4 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 4
DEBUG: assignLaneToBlock - adding lane 3 to block 2
DEBUG: assignLaneToBlock - block 2 now has 4 participating lanes
DEBUG: DoWhileStmt - Lane 3 completed body for iteration 0
DEBUG: DoWhileStmt - Lane 0 resuming do-while loop
DEBUG: DoWhileStmt - Lane 0 evaluating condition after iteration 0
DEBUG: removeThreadFromAllSets - removing lane 0 from all sets of block 2
DEBUG: removeThreadFromAllSets - block 2 had 3 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 0 from unknown lanes of block 2
DEBUG: removeThreadFromAllSets - Block 2 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 2 has 3 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - skipping 3 (LOOP_EXIT block where lanes should go)
DEBUG: removeThreadFromNestedBlocks - removing lane 0 from block 4 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 0 from all sets of block 4
DEBUG: removeThreadFromAllSets - block 4 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 0 from unknown lanes of block 4
DEBUG: removeThreadFromAllSets - Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 4 has 0 participating lanes after removal
DEBUG: DoWhileStmt - Lane 1 resuming do-while loop
DEBUG: DoWhileStmt - Lane 1 evaluating condition after iteration 0
DEBUG: removeThreadFromAllSets - removing lane 1 from all sets of block 2
DEBUG: removeThreadFromAllSets - block 2 had 2 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 1 from unknown lanes of block 2
DEBUG: removeThreadFromAllSets - Block 2 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 2 has 2 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - skipping 3 (LOOP_EXIT block where lanes should go)
DEBUG: removeThreadFromNestedBlocks - removing lane 1 from block 4 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 1 from all sets of block 4
DEBUG: removeThreadFromAllSets - block 4 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 1 from unknown lanes of block 4
DEBUG: removeThreadFromAllSets - Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 4 has 0 participating lanes after removal
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 evaluating condition after iteration 0
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 evaluating condition after iteration 0
DEBUG: DoWhileStmt - Lane 0 resuming do-while loop
DEBUG: DoWhileStmt - Lane 0 reconverging from do-while loop
DEBUG: assignLaneToBlock - moving lane 0 from block 2 (type 4) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 0 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: assignLaneToBlock - moving lane 0 from block 3 (type 6) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 0 from arrivedLanes of block 3
DEBUG: assignLaneToBlock - adding lane 0 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 1 resuming do-while loop
DEBUG: DoWhileStmt - Lane 1 reconverging from do-while loop
DEBUG: assignLaneToBlock - moving lane 1 from block 2 (type 4) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 1 to block 3
DEBUG: assignLaneToBlock - block 3 now has 2 participating lanes
DEBUG: assignLaneToBlock - moving lane 1 from block 3 (type 6) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 1 from arrivedLanes of block 3
DEBUG: assignLaneToBlock - adding lane 1 to block 3
DEBUG: assignLaneToBlock - block 3 now has 2 participating lanes
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 executing body for iteration 1 from statement 0
DEBUG: DoWhileStmt - Lane 2 needs iteration block (first statement is not control flow)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {2 3 } (2 lanes)
DEBUG: addUnknownLane - adding lane 2 to new block 5
DEBUG: addUnknownLane - added lane 2 to unknown lanes of block 5
DEBUG: addUnknownLane - adding lane 3 to new block 5
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 5
DEBUG: DoWhileStmt - Lane 2 created iteration starting block 5 for iteration 1
DEBUG: assignLaneToBlock - moving lane 2 from block 2 (type 4) to block 5 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 2 to block 5
DEBUG: assignLaneToBlock - block 5 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 2 moved to iteration starting block 5 for iteration 1
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 5, instruction key=(0x5030000018a0,5)
DEBUG: WAVE_OP: Lane 2 cannot execute, starting to wait in block 5
DEBUG: WAVE_OP: Refreshed block 5 resolution status
DEBUG: Block 5 wave 0 unknown lanes: {3 }
DEBUG: canExecuteWaveInstruction for lane 2 in block 5: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: AssignStmt - Lane 2 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 2 waiting for wave operation in phase 5 at statement 0, iteration 1
DEBUG: WAVE_WAIT: Lane 2 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 1 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: DoWhileStmt - Lane 3 found existing iteration starting block 5 for iteration 1
DEBUG: assignLaneToBlock - moving lane 3 from block 2 (type 4) to block 5 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 3 to block 5
DEBUG: assignLaneToBlock - block 5 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 moved to iteration starting block 5 for iteration 1
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 5, instruction key=(0x5030000018a0,5)
DEBUG: WAVE_OP: Lane 3 cannot execute, starting to wait in block 5
DEBUG: WAVE_OP: Refreshed block 5 resolution status
DEBUG: Block 5 wave 0 unknown lanes: {}
DEBUG: areAllParticipantsKnownForWaveInstruction - All participants known for sync point
DEBUG: canExecuteWaveInstruction for lane 3 in block 5: canExecuteInBlock=1, allParticipantsKnown=1, allParticipantsArrived=1, canExecuteGlobal=1, syncPointPhase=phase_1
DEBUG: WAVE_OP: After lane 3 started waiting, wave operation can now execute!
DEBUG: WAVE_OP: Updated sync point - allParticipantsKnown=1, allParticipantsArrived=1, readyToExecute=0
DEBUG: AssignStmt - Lane 3 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 3 waiting for wave operation in phase 5 at statement 0, iteration 1
DEBUG: WAVE_WAIT: Lane 3 caught WaveOperationWaitException, state=2
DEBUG: WAVE_OP: Storing collective result for lanes: 2 3  (phase: 2)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 0 cannot execute, starting to wait in block 3
DEBUG: WAVE_OP: Refreshed block 3 resolution status
DEBUG: Block 3 wave 0 unknown lanes: {2 3 }
DEBUG: canExecuteWaveInstruction for lane 0 in block 3: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=0, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: VarDeclStmt - Lane 0 caught WaveOperationWaitException, re-throwing
DEBUG: WAVE_WAIT: Lane 0 caught WaveOperationWaitException, state=2
DEBUG: WAVE_OP: Lane 1 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 1 cannot execute, starting to wait in block 3
DEBUG: WAVE_OP: Refreshed block 3 resolution status
DEBUG: Block 3 wave 0 unknown lanes: {2 3 }
DEBUG: canExecuteWaveInstruction for lane 1 in block 3: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: VarDeclStmt - Lane 1 caught WaveOperationWaitException, re-throwing
DEBUG: WAVE_WAIT: Lane 1 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 executing body for iteration 1 from statement 0
DEBUG: DoWhileStmt - Lane 2 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 5, instruction key=(0x5030000018a0,5)
DEBUG: WAVE_OP: Lane 2 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 2 retrieving stored wave result: 2 (phase: 2)
DEBUG: assignLaneToBlock - moving lane 2 from block 5 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 5
DEBUG: assignLaneToBlock - adding lane 2 to block 2
DEBUG: assignLaneToBlock - block 2 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 2 completed body for iteration 1
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 1 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 5, instruction key=(0x5030000018a0,5)
DEBUG: WAVE_OP: Lane 3 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 3 retrieving stored wave result: 2 (phase: 3)
DEBUG: assignLaneToBlock - moving lane 3 from block 5 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 5
DEBUG: assignLaneToBlock - adding lane 3 to block 2
DEBUG: assignLaneToBlock - block 2 now has 2 participating lanes
DEBUG: DoWhileStmt - Lane 3 completed body for iteration 1
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 evaluating condition after iteration 1
DEBUG: removeThreadFromAllSets - removing lane 2 from all sets of block 2
DEBUG: removeThreadFromAllSets - block 2 had 1 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 2 from unknown lanes of block 2
DEBUG: removeThreadFromAllSets - Block 2 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 2 has 1 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - skipping 3 (LOOP_EXIT block where lanes should go)
DEBUG: removeThreadFromNestedBlocks - removing lane 2 from block 4 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 2 from all sets of block 4
DEBUG: removeThreadFromAllSets - block 4 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 2 from unknown lanes of block 4
DEBUG: removeThreadFromAllSets - Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 4 has 0 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - removing lane 2 from block 5 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 2 from all sets of block 5
DEBUG: removeThreadFromAllSets - block 5 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 2 from unknown lanes of block 5
DEBUG: removeThreadFromAllSets - Block 5 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 5 has 0 participating lanes after removal
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 evaluating condition after iteration 1
DEBUG: DoWhileStmt - Lane 2 resuming do-while loop
DEBUG: DoWhileStmt - Lane 2 reconverging from do-while loop
DEBUG: assignLaneToBlock - moving lane 2 from block 2 (type 4) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 2 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: assignLaneToBlock - moving lane 2 from block 3 (type 6) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 2 from arrivedLanes of block 3
DEBUG: assignLaneToBlock - adding lane 2 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 2 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: findOrCreateBlockForPath called with 1 waves of unknown lanes
  Wave 0: {3 } (1 lanes)
DEBUG: addUnknownLane - adding lane 3 to new block 6
DEBUG: addUnknownLane - added lane 3 to unknown lanes of block 6
DEBUG: DoWhileStmt - Lane 3 created iteration starting block 6 for iteration 2
DEBUG: assignLaneToBlock - moving lane 3 from block 2 (type 4) to block 6 (type 0), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 3 to block 6
DEBUG: assignLaneToBlock - block 6 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 moved to iteration starting block 6 for iteration 2
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 6, instruction key=(0x5030000018a0,6)
DEBUG: WAVE_OP: Lane 3 cannot execute, starting to wait in block 6
DEBUG: WAVE_OP: Refreshed block 6 resolution status
DEBUG: Block 6 wave 0 unknown lanes: {}
DEBUG: areAllParticipantsKnownForWaveInstruction - All participants known for sync point
DEBUG: canExecuteWaveInstruction for lane 3 in block 6: canExecuteInBlock=1, allParticipantsKnown=1, allParticipantsArrived=1, canExecuteGlobal=1, syncPointPhase=phase_1
DEBUG: WAVE_OP: After lane 3 started waiting, wave operation can now execute!
DEBUG: WAVE_OP: Updated sync point - allParticipantsKnown=1, allParticipantsArrived=1, readyToExecute=0
DEBUG: AssignStmt - Lane 3 caught WaveOperationWaitException, re-throwing
DEBUG: DoWhileStmt - Lane 3 waiting for wave operation in phase 5 at statement 0, iteration 2
DEBUG: WAVE_WAIT: Lane 3 caught WaveOperationWaitException, state=2
DEBUG: WAVE_OP: Storing collective result for lanes: 3  (phase: 2)
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 2 cannot execute, starting to wait in block 3
DEBUG: WAVE_OP: Refreshed block 3 resolution status
DEBUG: Block 3 wave 0 unknown lanes: {3 }
DEBUG: canExecuteWaveInstruction for lane 2 in block 3: canExecuteInBlock=0, allParticipantsKnown=0, allParticipantsArrived=1, canExecuteGlobal=0, syncPointPhase=phase_0
DEBUG: VarDeclStmt - Lane 2 caught WaveOperationWaitException, re-throwing
DEBUG: WAVE_WAIT: Lane 2 caught WaveOperationWaitException, state=2
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 executing body for iteration 2 from statement 0
DEBUG: DoWhileStmt - Lane 3 needs iteration block (first statement is not control flow)
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 6, instruction key=(0x5030000018a0,6)
DEBUG: WAVE_OP: Lane 3 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 3 retrieving stored wave result: 1 (phase: 3)
DEBUG: assignLaneToBlock - moving lane 3 from block 6 (type 0) to block 2 (type 4), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 6
DEBUG: assignLaneToBlock - adding lane 3 to block 2
DEBUG: assignLaneToBlock - block 2 now has 1 participating lanes
DEBUG: DoWhileStmt - Lane 3 completed body for iteration 2
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 evaluating condition after iteration 2
DEBUG: removeThreadFromAllSets - removing lane 3 from all sets of block 2
DEBUG: removeThreadFromAllSets - block 2 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 2
DEBUG: removeThreadFromAllSets - Block 2 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 2 has 0 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - skipping 3 (LOOP_EXIT block where lanes should go)
DEBUG: removeThreadFromNestedBlocks - removing lane 3 from block 4 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 3 from all sets of block 4
DEBUG: removeThreadFromAllSets - block 4 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 4
DEBUG: removeThreadFromAllSets - Block 4 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 4 has 0 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - removing lane 3 from block 5 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 3 from all sets of block 5
DEBUG: removeThreadFromAllSets - block 5 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 5
DEBUG: removeThreadFromAllSets - Block 5 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 5 has 0 participating lanes after removal
DEBUG: removeThreadFromNestedBlocks - removing lane 3 from block 6 (child of 2)
DEBUG: removeThreadFromAllSets - removing lane 3 from all sets of block 6
DEBUG: removeThreadFromAllSets - block 6 had 0 participating lanes before removal
DEBUG: removeUnknownLane - removing lane 3 from unknown lanes of block 6
DEBUG: removeThreadFromAllSets - Block 6 now has all unknowns resolved for wave 0 - checking for ready wave operations
DEBUG: removeThreadFromAllSets - block 6 has 0 participating lanes after removal
DEBUG: DoWhileStmt - Lane 3 resuming do-while loop
DEBUG: DoWhileStmt - Lane 3 reconverging from do-while loop
DEBUG: assignLaneToBlock - moving lane 3 from block 2 (type 4) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 2
DEBUG: assignLaneToBlock - adding lane 3 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: assignLaneToBlock - moving lane 3 from block 3 (type 6) to block 3 (type 6), isHeaderToLoopBody=0
DEBUG: Removed lane 3 from arrivedLanes of block 3
DEBUG: assignLaneToBlock - adding lane 3 to block 3
DEBUG: assignLaneToBlock - block 3 now has 1 participating lanes
DEBUG: WAVE_OP: Updated participants before execution to include all current block lanes: 0 1 2 3 
DEBUG: WAVE_OP: Storing collective result for lanes: 0 1 2 3  (phase: 2)
DEBUG: WAVE_OP: Lane 3 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 0 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 0 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 0 retrieving stored wave result: 21 (phase: 2)
DEBUG: WAVE_OP: Lane 1 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 1 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 1 retrieving stored wave result: 21 (phase: 2)
DEBUG: WAVE_OP: Lane 2 executing WaveActiveSum in block 3, instruction key=(0x503000001960,3)
DEBUG: WAVE_OP: Lane 2 is resuming from wave operation, checking for stored result
DEBUG: WAVE_OP: Lane 2 retrieving stored wave result: 21 (phase: 3)
lane 3 have completed execution
lane 0 have completed execution
lane 1 have completed execution
lane 2 have completed execution
=== Order Independence Verification ===
✅ PASS: Program is order-independent!
Verified across 1 different thread orderings.

✅ Execution completed successfully!


=== STDERR ===

=== Starting HLSL Parse with AST Ownership ===
File: /home/t-zheychen/dxc_workspace/DirectXShaderCompiler/tools/clang/tools/dxc-fuzzer/examples/control_flow_do_while.hlsl
About to parse AST directly...
DEBUG: Captured ASTContext pointer: 0x529000000200
DEBUG: Found function: main
DEBUG: Captured main function: 0x521000050508
collect_memory_operations_in_dbeg: Processing CompoundStmt
collect_memory_operations_in_dbeg: Processing DeclStmt
collect_memory_operations_in_dbeg: Processing CallExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing DeclStmt
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing DeclStmt
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing DoStmt
collect_memory_operations_in_dbeg: Processing CompoundStmt
collect_memory_operations_in_dbeg: Processing CompoundAssignOperator
  Found BinaryOperator, isAssignmentOp: 1
  LHS type: DeclRefExpr
    is_shared_memory_access: checking DeclRefExpr
    Found DeclRefExpr
    Variable type: uint
  is_shared_memory_access(lhs): 0
    is_shared_memory_access: checking CallExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing CallExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing IntegerLiteral
collect_memory_operations_in_dbeg: Processing UnaryOperator
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing BinaryOperator
  Found BinaryOperator, isAssignmentOp: 0
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing DeclStmt
collect_memory_operations_in_dbeg: Processing CallExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_memory_operations_in_dbeg: Processing ImplicitCastExpr
collect_memory_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing CompoundStmt
collect_synchronization_operations_in_dbeg: Processing DeclStmt
collect_synchronization_operations_in_dbeg: Processing CallExpr
Checking if WaveGetLaneIndex is a barrier operation
Found wave operation: WaveGetLaneIndex
Checking if WaveGetLaneIndex is a barrier operation
Found wave_operation call - adding to DBEG
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing DeclStmt
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing DeclStmt
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing DoStmt
collect_synchronization_operations_in_dbeg: Processing CompoundStmt
collect_synchronization_operations_in_dbeg: Processing CompoundAssignOperator
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing CallExpr
Checking if WaveActiveSum is a barrier operation
Found wave operation: WaveActiveSum
Checking if WaveActiveSum is a barrier operation
Found wave_operation call - adding to DBEG
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing IntegerLiteral
collect_synchronization_operations_in_dbeg: Processing UnaryOperator
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing BinaryOperator
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing DeclStmt
collect_synchronization_operations_in_dbeg: Processing CallExpr
Checking if WaveActiveSum is a barrier operation
Found wave operation: WaveActiveSum
Checking if WaveActiveSum is a barrier operation
Found wave_operation call - adding to DBEG
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
collect_synchronization_operations_in_dbeg: Processing ImplicitCastExpr
collect_synchronization_operations_in_dbeg: Processing DeclRefExpr
Simplified DBEG: Single block with 32 threads and 96 memory operations

=== Cross-Dynamic-Block Analysis ===
Total memory operations: 96
Op 0: Thread 0 in DB0 wave_op
Op 1: Thread 1 in DB0 wave_op
Op 2: Thread 2 in DB0 wave_op
Op 3: Thread 3 in DB0 wave_op
Op 4: Thread 4 in DB0 wave_op
Op 5: Thread 5 in DB0 wave_op
Op 6: Thread 6 in DB0 wave_op
Op 7: Thread 7 in DB0 wave_op
Op 8: Thread 8 in DB0 wave_op
Op 9: Thread 9 in DB0 wave_op
Op 10: Thread 10 in DB0 wave_op
Op 11: Thread 11 in DB0 wave_op
Op 12: Thread 12 in DB0 wave_op
Op 13: Thread 13 in DB0 wave_op
Op 14: Thread 14 in DB0 wave_op
Op 15: Thread 15 in DB0 wave_op
Op 16: Thread 16 in DB0 wave_op
Op 17: Thread 17 in DB0 wave_op
Op 18: Thread 18 in DB0 wave_op
Op 19: Thread 19 in DB0 wave_op
Op 20: Thread 20 in DB0 wave_op
Op 21: Thread 21 in DB0 wave_op
Op 22: Thread 22 in DB0 wave_op
Op 23: Thread 23 in DB0 wave_op
Op 24: Thread 24 in DB0 wave_op
Op 25: Thread 25 in DB0 wave_op
Op 26: Thread 26 in DB0 wave_op
Op 27: Thread 27 in DB0 wave_op
Op 28: Thread 28 in DB0 wave_op
Op 29: Thread 29 in DB0 wave_op
Op 30: Thread 30 in DB0 wave_op
Op 31: Thread 31 in DB0 wave_op
Op 32: Thread 0 in DB0 wave_op
Op 33: Thread 1 in DB0 wave_op
Op 34: Thread 2 in DB0 wave_op
Op 35: Thread 3 in DB0 wave_op
Op 36: Thread 4 in DB0 wave_op
Op 37: Thread 5 in DB0 wave_op
Op 38: Thread 6 in DB0 wave_op
Op 39: Thread 7 in DB0 wave_op
Op 40: Thread 8 in DB0 wave_op
Op 41: Thread 9 in DB0 wave_op
Op 42: Thread 10 in DB0 wave_op
Op 43: Thread 11 in DB0 wave_op
Op 44: Thread 12 in DB0 wave_op
Op 45: Thread 13 in DB0 wave_op
Op 46: Thread 14 in DB0 wave_op
Op 47: Thread 15 in DB0 wave_op
Op 48: Thread 16 in DB0 wave_op
Op 49: Thread 17 in DB0 wave_op
Op 50: Thread 18 in DB0 wave_op
Op 51: Thread 19 in DB0 wave_op
Op 52: Thread 20 in DB0 wave_op
Op 53: Thread 21 in DB0 wave_op
Op 54: Thread 22 in DB0 wave_op
Op 55: Thread 23 in DB0 wave_op
Op 56: Thread 24 in DB0 wave_op
Op 57: Thread 25 in DB0 wave_op
Op 58: Thread 26 in DB0 wave_op
Op 59: Thread 27 in DB0 wave_op
Op 60: Thread 28 in DB0 wave_op
Op 61: Thread 29 in DB0 wave_op
Op 62: Thread 30 in DB0 wave_op
Op 63: Thread 31 in DB0 wave_op
Op 64: Thread 0 in DB0 wave_op
Op 65: Thread 1 in DB0 wave_op
Op 66: Thread 2 in DB0 wave_op
Op 67: Thread 3 in DB0 wave_op
Op 68: Thread 4 in DB0 wave_op
Op 69: Thread 5 in DB0 wave_op
Op 70: Thread 6 in DB0 wave_op
Op 71: Thread 7 in DB0 wave_op
Op 72: Thread 8 in DB0 wave_op
Op 73: Thread 9 in DB0 wave_op
Op 74: Thread 10 in DB0 wave_op
Op 75: Thread 11 in DB0 wave_op
Op 76: Thread 12 in DB0 wave_op
Op 77: Thread 13 in DB0 wave_op
Op 78: Thread 14 in DB0 wave_op
Op 79: Thread 15 in DB0 wave_op
Op 80: Thread 16 in DB0 wave_op
Op 81: Thread 17 in DB0 wave_op
Op 82: Thread 18 in DB0 wave_op
Op 83: Thread 19 in DB0 wave_op
Op 84: Thread 20 in DB0 wave_op
Op 85: Thread 21 in DB0 wave_op
Op 86: Thread 22 in DB0 wave_op
Op 87: Thread 23 in DB0 wave_op
Op 88: Thread 24 in DB0 wave_op
Op 89: Thread 25 in DB0 wave_op
Op 90: Thread 26 in DB0 wave_op
Op 91: Thread 27 in DB0 wave_op
Op 92: Thread 28 in DB0 wave_op
Op 93: Thread 29 in DB0 wave_op
Op 94: Thread 30 in DB0 wave_op
Op 95: Thread 31 in DB0 wave_op
SIMPLIFIED VALIDATION: Focusing on control flow determinism
Complex DBEG analysis disabled - moved to interpreter
Direct ParseAST complete
=== HLSL Parse with AST Ownership Complete ===
Executing collective wave operation for wave 0 at instruction 0x5030000018a0 block 4
Collective wave operation result: 4
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 0 from WaitingForWave to Ready
  Waking up lane 1 from WaitingForWave to Ready
  Waking up lane 2 from WaitingForWave to Ready
  Waking up lane 3 from WaitingForWave to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 0 from WaitingForResume to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 1 from WaitingForResume to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
Executing collective wave operation for wave 0 at instruction 0x5030000018a0 block 5
Collective wave operation result: 2
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 2 from WaitingForWave to Ready
  Waking up lane 3 from WaitingForWave to Ready
Waking up lanes to retrieve wave operation results for wave 0
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
Executing collective wave operation for wave 0 at instruction 0x5030000018a0 block 6
Collective wave operation result: 1
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 3 from WaitingForWave to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
Executing collective wave operation for wave 0 at instruction 0x503000001960 block 3
Collective wave operation result: 21
Lane 3 retrieving stored wave result: 21 (phase: 2)
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 0 from WaitingForWave to Ready
  Waking up lane 1 from WaitingForWave to Ready
  Waking up lane 2 from WaitingForWave to Ready
Waking up lanes to retrieve wave operation results for wave 0
Waking up lanes to retrieve wave operation results for wave 0

=== Dynamic Execution Graph (MiniHLSL Interpreter) ===
Threadgroup Size: 4
Wave Size: 32
Wave Count: 1
Total Dynamic Blocks: 6
Next Block ID: 7

Dynamic Block 1:
  Block ID: 1
  Block Type: REGULAR
  Parent Block: 0
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 2:
  Block ID: 2
  Block Type: LOOP_HEADER
  Parent Block: 1
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000003c10
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 3:
  Block ID: 3
  Block Type: LOOP_EXIT
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000003c10
  Participating Lanes by Wave:
    Wave 0: {3} (1 lanes)
  Total Participating Lanes: 1
  Arrived Lanes by Wave:
    Wave 0: {3} (1 lanes)
  Waiting Lanes by Wave:
    Wave 0: {0, 1, 2} (3 lanes)
  Instructions (1):
    0: WaveActiveOp (ptr: 0x503000001960)
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 4:
  Block ID: 4
  Block Type: REGULAR
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000006c10
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Instructions (1):
    0: WaveActiveOp (ptr: 0x5030000018a0)
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 5:
  Block ID: 5
  Block Type: REGULAR
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000016c10
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Instructions (1):
    0: WaveActiveOp (ptr: 0x5030000018a0)
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 6:
  Block ID: 6
  Block Type: REGULAR
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000026c10
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Instructions (1):
    0: WaveActiveOp (ptr: 0x5030000018a0)
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

=== Wave States ===
Wave 0:
  Wave Size: 32
  Lane Count: 4
  Active Lanes: 4
  Currently Active Lanes: 4
  Lane to Block Mapping:
    Lane 0 -> Block 3
    Lane 1 -> Block 3
    Lane 2 -> Block 3
    Lane 3 -> Block 3
  Active Sync Points (4):
    Instruction 0x5030000018a0 block 4 (WaveActiveOp):
      Expected: 4 lanes
      Arrived: 4 lanes
      Ready to execute: No
    Instruction 0x5030000018a0 block 5 (WaveActiveOp):
      Expected: 2 lanes
      Arrived: 2 lanes
      Ready to execute: No
    Instruction 0x5030000018a0 block 6 (WaveActiveOp):
      Expected: 1 lanes
      Arrived: 1 lanes
      Ready to execute: No
    Instruction 0x503000001960 block 3 (WaveActiveOp):
      Expected: 4 lanes
      Arrived: 4 lanes
      Ready to execute: No

=== End Dynamic Execution Graph ===


=== Final Variable Values ===
Wave 0:
  Lane 0:
    i = 1
    laneId = 0
    result = 4
    totalSum = 21
    (state: Completed)
  Lane 1:
    i = 1
    laneId = 1
    result = 4
    totalSum = 21
    (state: Completed)
  Lane 2:
    i = 2
    laneId = 2
    result = 6
    totalSum = 21
    (state: Completed)
  Lane 3:
    i = 3
    laneId = 3
    result = 7
    totalSum = 21
    (state: Completed)
=== End Variable Values ===

Executing collective wave operation for wave 0 at instruction 0x5030000018a0 block 4
Collective wave operation result: 4
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 0 from WaitingForWave to Ready
  Waking up lane 1 from WaitingForWave to Ready
  Waking up lane 2 from WaitingForWave to Ready
  Waking up lane 3 from WaitingForWave to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 0 from WaitingForResume to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 1 from WaitingForResume to Ready
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 0 from WaitingForResume to Ready
  Waking up lane 1 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
Executing collective wave operation for wave 0 at instruction 0x5030000018a0 block 5
Collective wave operation result: 2
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 2 from WaitingForWave to Ready
  Waking up lane 3 from WaitingForWave to Ready
Waking up lanes to retrieve wave operation results for wave 0
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 2 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
Executing collective wave operation for wave 0 at instruction 0x5030000018a0 block 6
Collective wave operation result: 1
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 3 from WaitingForWave to Ready
  Waking up lane 3 from WaitingForResume to Ready
  Waking up lane 3 from WaitingForResume to Ready
Executing collective wave operation for wave 0 at instruction 0x503000001960 block 3
Collective wave operation result: 21
Lane 3 retrieving stored wave result: 21 (phase: 2)
Waking up lanes to retrieve wave operation results for wave 0
  Waking up lane 0 from WaitingForWave to Ready
  Waking up lane 1 from WaitingForWave to Ready
  Waking up lane 2 from WaitingForWave to Ready
Waking up lanes to retrieve wave operation results for wave 0
Waking up lanes to retrieve wave operation results for wave 0

=== Dynamic Execution Graph (MiniHLSL Interpreter) ===
Threadgroup Size: 4
Wave Size: 32
Wave Count: 1
Total Dynamic Blocks: 6
Next Block ID: 7

Dynamic Block 1:
  Block ID: 1
  Block Type: REGULAR
  Parent Block: 0
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 2:
  Block ID: 2
  Block Type: LOOP_HEADER
  Parent Block: 1
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000003c10
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 3:
  Block ID: 3
  Block Type: LOOP_EXIT
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000003c10
  Participating Lanes by Wave:
    Wave 0: {3} (1 lanes)
  Total Participating Lanes: 1
  Arrived Lanes by Wave:
    Wave 0: {3} (1 lanes)
  Waiting Lanes by Wave:
    Wave 0: {0, 1, 2} (3 lanes)
  Instructions (1):
    0: WaveActiveOp (ptr: 0x503000001960)
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 4:
  Block ID: 4
  Block Type: REGULAR
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000006c10
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Instructions (1):
    0: WaveActiveOp (ptr: 0x5030000018a0)
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 5:
  Block ID: 5
  Block Type: REGULAR
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000016c10
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Instructions (1):
    0: WaveActiveOp (ptr: 0x5030000018a0)
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

Dynamic Block 6:
  Block ID: 6
  Block Type: REGULAR
  Parent Block: 2
  Program Point: 0
  Is Converged: No
  Nesting Level: 0
  Source Statement: 0x504000026c10
  Participating Lanes by Wave:
    Wave 0: {} (0 lanes)
  Total Participating Lanes: 0
  Instructions (1):
    0: WaveActiveOp (ptr: 0x5030000018a0)
  Unknown Resolution Status by Wave:
    Wave 0: Resolved

=== Wave States ===
Wave 0:
  Wave Size: 32
  Lane Count: 4
  Active Lanes: 4
  Currently Active Lanes: 4
  Lane to Block Mapping:
    Lane 0 -> Block 3
    Lane 1 -> Block 3
    Lane 2 -> Block 3
    Lane 3 -> Block 3
  Active Sync Points (4):
    Instruction 0x5030000018a0 block 4 (WaveActiveOp):
      Expected: 4 lanes
      Arrived: 4 lanes
      Ready to execute: No
    Instruction 0x5030000018a0 block 5 (WaveActiveOp):
      Expected: 2 lanes
      Arrived: 2 lanes
      Ready to execute: No
    Instruction 0x5030000018a0 block 6 (WaveActiveOp):
      Expected: 1 lanes
      Arrived: 1 lanes
      Ready to execute: No
    Instruction 0x503000001960 block 3 (WaveActiveOp):
      Expected: 4 lanes
      Arrived: 4 lanes
      Ready to execute: No

=== End Dynamic Execution Graph ===


=== Final Variable Values ===
Wave 0:
  Lane 0:
    i = 1
    laneId = 0
    result = 4
    totalSum = 21
    (state: Completed)
  Lane 1:
    i = 1
    laneId = 1
    result = 4
    totalSum = 21
    (state: Completed)
  Lane 2:
    i = 2
    laneId = 2
    result = 6
    totalSum = 21
    (state: Completed)
  Lane 3:
    i = 3
    laneId = 3
    result = 7
    totalSum = 21
    (state: Completed)
=== End Variable Values ===



=== VERIFICATION ===
✅ totalSum: 21 (found 8 instances)

